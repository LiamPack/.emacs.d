fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

emacs-lisp-mode

(autoload ";;;###autoload")
(pt "(point)")
(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(iflet* "(if-let* (" p ")" n> r> ")")
(whenlet* "(when-let* (" p ")" n> r> ")")
(andlet* "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
        "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name))) " ends here" n)
(dk "(define-key " p " (kbd \"" p "\") " p ")")

eshell-mode

(for "for " (p "i") " in " p " { " q " }")
(while "while { " p " } { " q " }")
(until "until { " p " } { " q " }")
(if "if { " p " } { " q " }")
(ife "if { " p " } { " p " } { " q " }")
(unl "unless { " p " } { " q " }")
(unle "unless { " p " } { " p " } { " q " }")

text-mode rst-mode

(asciibox "+-" (make-string (length str) ?-) "-+" n
          "| " (s str)                       " |" n
          "+-" (make-string (length str) ?-) "-+" n)
(calc (p "taylor(sin(x),x=0,3)" formula) n "----" n (format "%s" (calc-eval formula)))
(h1 "" n
    "==" (make-string (length title) ?=)"==" n
    "= " (p "Title: " title) " =" n
    "==" (make-string (length title) ?=) "==" n n)
(h2 "" n
    "- " (p "Title: " title) " -" n
    "--" (make-string (length title) ?-) "--" n n)
(logt "<<< log" n (format-time-string "%Y-%m-%d") "; ")

java-mode

(class "public class " (p (file-name-base (or (buffer-file-name) (buffer-name)))) " {" n> r> n "}")

c-mode :when (re-search-backward "^\\S-*$" (line-beginning-position) 'noerror)

(inc "#include <" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) ">")
(incc "#include \"" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) "\"")

org-mode

;; (title "#+title: " p n "#+author: Liam Packer" n "#+language: en" n n)
(bquote "#+begin_quote" n> r> n> "#+end_quote")
(bexample "#+begin_example" n> r> n> "#+end_example")
(bcenter "#+begin_center" n> r> n> "#+end_center")
(bcomment "#+begin_comment" n> r> n> "#+end_comment")
(bverse "#+begin_verse" n> r> n> "#+end_verse")
(bsrc "#+begin_src " p n> r> n> "#+end_src" :post (org-edit-src-code))
(belisp "#+begin_src emacs-lisp" n> r> n "#+end_src" :post (org-edit-src-code))
(bgnuplot & "#+begin_src gnuplot :var data=" (p "table") " :file " (p "plot.png") n r n "#+end_src" :post (org-edit-src-code))
(bquote & "#+begin_quote" n> r> n "#+end_quote")
(bsidenote & "#+begin_sidenote" n> r> n "#+end_sidenote")
(bmarginnote & "#+begin_marginnote" n> r> n "#+end_marginnote")
(bexample & "#+begin_example" n> r> n "#+end_example")
;; (center & "#+begin_center" n> r> n "#+end_center")
(ascii & "#+begin_export ascii" n> r> n "#+end_export")

tex-mode org-mode
(tit "\\textit{" q "} ")
(lrnorm "\\|" q "\\| " )
(eqref "\\eqnref{" q "} ")
(mk "\\(" q "\\) " )
(mkb "\\{" q "\\} ")
(setin "\\{" p "\\, | \\, " q "\\} ")
(dm "\\[" n q n "\\] ")
(dmi "\\[" q "\\] ")
(sumin "\\sum_{" p "}^{" q "} ")
(sumi "\\sum_{" q "} ")
(intin "\\int_{" p"}^{" q "} ")
(inti "\\int_{" q "} ")
(wdge "\\wedge ")
(pm "\\pm ")
(cdts "\\cdots ")
(aal "\\alpha ")
(bbeta "\\beta ")
(ggam "\\gamma ")
(ddelt "\\delta ")
(DDELT "\\Delta ")
(ssig "\\sigma  ")
(pphi "\\phi ")
(eps "\\epsilon ")
(prodin "\\prod_{" p "}^{" q "} ")
(cexp "\\E[" p "|" q "] ")
(mgf "\\E[e^{\\lambda " q " }] ")
(charf "\\E[e^{i \\theta " q " }] ")
(ex "\\E[" p "] ")
(norml "\mathcal{N}(" p ", " q ") ")
(expt "e^{" p "} ")
(expp "\\exp^{" p "} ")
(sinn "\\sin(" p ") ")
(coss "\\cos(" p ") ")
(fr "\\frac{" p "}{" q "} ")
(o12 "\\frac{1}{2} ")
(supe "\\sup_{" p "}" q)
(infe "\\inf_{" p "}" q)
(iide "\\stackrel{iid}{\\sim} ")
(eqd "\\stackrel{d}{=} ")
(eq "= ")
(aeq "&= ")
(amp "& ")
(lt "< ")
(gt "> ")
(lleq "\\leq ")
(ggeq "\\leq ")
(salg "\\sigma(" p ") " q)
(asub "a_{" p "} " q)
(bsub "b_{" p "} " q)
(xsub "x_{" p "} " q)
(ysub "y_{" p "} " q)
(zsub "z_{" p "} " q)
(Xsub "X_{" p "} " q)
(Ysub "X_{" p "} " q)
(Zsub "Z_{" p "} " q)
(subb "_{" p "} ")
(sq "^2 ")
(sqrt "\\sqrt{" q "} ")
(lg "\log (" q ") ")
(cal "\\mathcal{" p "} " q)
(-> "\\to ")
(tto "\\to ")
(--> "\\rightarrow")
(TTO "\\Rightarrow")
(mto "\\mapsto")
(divv "\\nabla \\cdot")
(grd "\\nabla ")
(cx "\\times ")
(cc "\\subset ")
(cce "\\subseteq ")
(lim "\\lim_{" (s "n \\to \\infty") "} " q)
(inf "\\infty ")
(pr "' ")
(prob "\\PP(" q ") ")
(par "\\partial ")
(ddx "\\frac{d}{dx} ")
(ddxi "\\frac{d}{d "(s "x_i") "} ")
(ddxf "\\frac{ d " (s "f") "}{ \\partial " (s "dx") "} ")
(ddx2f "\\frac{ d^2 " (s "f") "}{ \\partial " (s "dx^2") "} ")
(pdxf "\\frac{ \\partial " (s "f") "}{ \\partial " (s "x") "} ")
(pdx2f "\\frac{ \\partial^2 " (s "f") "}{ \\partial " (s "x^2") "} ")
(pdi "\\partial_{" (s "i") "} ")
(pdxi "\\frac{\\partial}{\\partial " (s "x_i") "} ")
(ccup "\\cup ")
(ccap "\\cap ")
(cupin "\\cup_{i=1}^n ")
(capin "\\cup_{i=1}^n ")
(Cup "\\bigcup_{" (s "i \\in I") "} ")
(Cap "\\bigcap_{" (s "i \\in I") "} ")
(mag "\\|" (s "x") "\\| ")
(abs "|" (s "x") "| ")

markdown-mode

(header "+++" n "title = \"" p n "tags = [" p "]" n "date = Date(" p ")" n "+++" n "# {{ title }}" n "{{ page_tags }} " n)
(title " {{ title }} ")
(tags "{{ page_tags }} ")
(last-modified "*last modified*: {{ last_modified }} ")


;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
