#+TITLE: My Emacs Config

Documenting this configuration is a way to consolidate the knowledge of
my own environment. This could serve as an entry-point for someone
(bless their heart) to try to see what this configuration has to offer,
but this is primarily (and perhaps counter-intuitively) for selfish
reasons.

There's an emphasis on simple utilities and packages. This logically
leads to relying on many of the wonderful, but perhaps
not-as-well-understood, built-in packages (~winner~, ~tab bar~,
~bibtex~, ~dabbrev+abbrev~, ~xref~, ...), and some
external-but-necessary packages ({~vertico~, ~embark~, ~consult~},
...). Simple packages allow composability: "dedication to its craft"
means that packages won't be stepping on each-others toes, which reduces
the cognitive overhead of evaluating, say, which search+jump function to
use.

More complex packages are no doubt useful and have their place (Helm,
Ivy). But in the past I relied too much on these big strong tools
without the underlying systems and methodology in place to effectively
use them, rendering my productivity much lower than it could have
been. The first brain needs to work well before the second brain can be
effective. Also I was incessantly yak-shaving since I had no laws about
which packages to install, so keeping a simple-and-preferred-built-in
approach forces me to think twice about whether I really need the new
shiny docker buffer editing package, or a SCSS-specific color-mapping
mode. An end-goal may be to someday rely on no external packages, but
that doesn't seem likely unless ~orderless~ somehow makes it into
~emacs.git~.

Inspiration is, as always, taken from those more experienced and more
wise than myself. Credits to the (many) configurations I took
inspiration from over the years, which are linked in a final section.

* sane defaults and general emacs capabilities
** initial setup, keybinds, etc.
Not all of the emacs defaults are quite sane. So here's to some sanity.

#+begin_src emacs-lisp
;; hacky way to remove the =custom-variables= generation in =init.el=
(setq custom-file (make-temp-file "emacs-custom-"))

;; some from https://pastebin.com/MDagsZD7
(lp-emacs-builtin-package 'emacs
  ;; why do these binds exist
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))

  ;; minimizes GC interference with user activity
  (setq gc-cons-threshold (* 16 1024 1024))

  ;; i fat-finger way too much to not have the confirmation
  (setq confirm-kill-emacs #'yes-or-no-p)
  (global-hl-line-mode t)               ; highlight current line
  (setq-default fill-column 72)         ; column length
  (column-number-mode t)                ; show column number in the mode line

  ;; name on top of frame
  (setq-default frame-title-format '("%b [%m]"))

  (setq warning-minimum-level :error)   ; avoid warning buffer

  ;; scroll
  (setq auto-window-vscroll nil)  ; avoid next-line to trigger line-move-partial
  (setq scroll-conservatively 10)
  (setq scroll-margin 7)
  (setq scroll-step 0)                  ; see info of `scroll-step`: as long as `scroll-conservatively`
                                        ; is a "large value" this should be fine
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (when (fboundp 'set-horizontal-scroll-bar-mode)
    (set-horizontal-scroll-bar-mode nil))

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 3) ((control) . nil)))
  (setq mouse-wheel-follow-mouse 't)

  ;; other basiscs
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-screen t)

  ;; create backups in separate folder
  (setq backup-directory-alist `(("." . "~/.emacs.d/saves")))
  (setq create-lockfiles nil)

  ;; answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  (if (display-graphic-p)
      (blink-cursor-mode 1)
    (progn
      (blink-cursor-mode -1)
      (setq visible-cursor t)))

  (setq-default
   initial-scratch-message ";; Present Day
"
   visible-bell t
   create-lockfiles nil)

  (show-paren-mode t)
  (setq show-paren-style 'parenthesis)

  (setq indent-tabs-mode nil                 ; don't insert tab when indent
        help-window-select t                 ; focus on help window when openend
        window-combination-resize nil)       ; i'd rather balance than have it auto-proportionally
                                        ; balanace

  (defun lp--clean-up-buffer-or-region ()
    "Untabifies, indents and deletes trailing whitespace from buffer or region."
    (interactive)
    (save-excursion
      (unless (region-active-p)
        (mark-whole-buffer))
      (untabify (region-beginning) (region-end))
      (indent-region (region-beginning) (region-end))
      (save-restriction
        (narrow-to-region (region-beginning) (region-end))
        (delete-trailing-whitespace))))

  (define-key global-map (kbd "C-x k") #'(lambda () (interactive) (kill-buffer nil)))
  (define-key global-map (kbd "C-x K") #'(lambda () (interactive) (kill-buffer nil) (delete-window)))
  (define-key emacs-lisp-mode-map (kbd "C-c C-k") #'eval-buffer)
  (define-key global-map (kbd "C-c n") #'whitespace-cleanup)
  (define-key global-map (kbd "<f5>")  #'revert-buffer)

  (define-key global-map (kbd "M-z") #'zap-up-to-char) ;; i generally go up to a char non-inclusive
  (define-key global-map (kbd "M-Z") #'zap-to-char)

  (define-key global-map (kbd "C-<tab>") 'next-window-any-frame)
  (define-key global-map (kbd "<backtab>") 'previous-window-any-frame)
  (define-key global-map (kbd "C-x C-M-e") 'pp-macroexpand-last-sexp)
  ;; (define-key global-map (kbd "C-x C-e") 'eval-defun) ;; already bound to C-M-x
  (define-key global-map (kbd "C-h j") 'describe-keymap)
  (define-key global-map (kbd "C-c C-j") 'join-line)
  (define-key global-map (kbd "C-S-p") #'(lambda () (interactive) (previous-line 7)))
  (define-key global-map (kbd "C-S-n") #'(lambda () (interactive) (next-line 7)))
  )

(lp-emacs-builtin-package 'repeat
  (setq repeat-on-final-keystroke t)
  (setq set-mark-command-repeat-pop t)
  (repeat-mode 1))
#+end_src
** window management
#+begin_src emacs-lisp
(define-key global-map (kbd "M-o") 'other-window)
(define-key global-map (kbd "M-O") (lambda () (interactive) (other-window -1)))

(lp-emacs-builtin-package 'ibuffer                    ; Better buffer list
  (define-key global-map [remap list-buffers] #'ibuffer)
  ;; as always, from prot:
  (setq ibuffer-expert t)
  (setq ibuffer-display-summary nil)
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-movement-cycle nil)
  (setq ibuffer-default-sorting-mode 'filename/process)
  (setq ibuffer-use-header-line t)
  (setq ibuffer-default-shrink-to-minimum-size nil)
  (setq ibuffer-formats
        '((mark modified read-only locked " "
                (name 40 40 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " " filename-and-process)
          (mark " "
                (name 16 -1)
                " " filename)))
  (setq ibuffer-saved-filter-groups nil)
  (setq ibuffer-old-time 48)
  (add-hook 'ibuffer-mode-hook #'hl-line-mode)
  (define-key global-map (kbd "C-x C-b") #'ibuffer)
  (let ((map ibuffer-mode-map))
    (define-key map (kbd "* f") #'ibuffer-mark-by-file-name-regexp)
    (define-key map (kbd "* g") #'ibuffer-mark-by-content-regexp) ; "g" is for "grep"
    (define-key map (kbd "* n") #'ibuffer-mark-by-name-regexp)
    (define-key map (kbd "s n") #'ibuffer-do-sort-by-alphabetic)  ; "sort name" mnemonic
    (define-key map (kbd "/ g") #'ibuffer-filter-by-content))
  )

(lp-emacs-builtin-package 'tab-bar
  (setq tab-bar-close-button-show nil)
  ;; (setq tab-bar-close-last-tab-choice 'tab-bar-mode-disable)
  (setq tab-bar-close-tab-select 'recent)
  (setq tab-bar-new-tab-choice t)
  (setq tab-bar-new-tab-to 'right)
  (setq tab-bar-position nil)
  (setq tab-bar-show 1)
  (setq tab-bar-tab-hints t)
  (setq tab-bar-tab-name-function 'tab-bar-tab-name-current)
  (tab-bar-mode +1)
  (tab-bar-history-mode +1)
  ;; (tab-bar-mode -1)
  ;; (tab-bar-history-mode -1)
  (define-key global-map (kbd "<prior>") #'tab-previous)
  (define-key global-map (kbd "<next>") #'tab-next))

;; Thank you prot (see
;; https://protesilaos.com/dotemacs/#h:c110e399-3f43-4555-8427-b1afe44c0779)
(lp-emacs-builtin-package 'window
  (define-key global-map (kbd "C-x C-o") 'display-buffer)
  ;; [2021-12-21 Tue] C-x C-{p,n} go to next/previous buffer (new to me)
  (setq display-buffer-alist
        `(
          ;; below current window
          ("\\*\\(e?shell\\|v?term\\|.*geiser.*\\|\\)\\*"
           (display-buffer-below-selected)
           (window-height . 0.3))
          ("\\*Org Agenda\\*"
           (display-buffer-reuse-window display-buffer-same-window))
          (".*eww.*"
           (display-buffer-reuse-window display-buffer-same-window))
          ("\\*Org Src.*"
           (display-buffer-reuse-window display-buffer-same-window)
           (window-height . fit-window-to-buffer))
          ("\\`\\*Async Shell Command\\*\\'"
           (display-buffer-no-window))
          ;; top side window
          ("\\*\\(Flymake diagnostics\\|Package-Lint\\|flycheck\\).*"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . 0))
          ("\\*Messages.*"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . 1))
          ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|Flymake log\\|compilation\\|\\)\\*"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . 2))
          ;; left side window
          ("\\*\\(.* # Help.*\\|Help\\)\\*" ; See the hooks for `visual-line-mode'
           (display-buffer-reuse-mode-window display-buffer-in-side-window)
           (window-width . 0.25)
           (side . left)
           (slot . 0))
          ;; bottom buffer (NOT side window)
          ("\\*Embark Actions\\*"
           (display-buffer-reuse-mode-window display-buffer-at-bottom)
           (window-height . fit-window-to-buffer)
           (window-parameters . ((no-other-window . t)
                                 (mode-line-format . none))))
          ("\\*\\(Embark\\)?.*Completions.*"
           (display-buffer-reuse-mode-window display-buffer-at-bottom)
           (window-parameters . ((no-other-window . t))))
          ("\\*\\(Output\\|Register Preview\\).*"
           (display-buffer-reuse-mode-window display-buffer-at-bottom))

          ("\\*\\vc-\\(incoming\\|outgoing\\|git : \\).*"
           (display-buffer-reuse-mode-window display-buffer-below-selected)
           ;; NOTE 2021-10-06: we cannot `fit-window-to-buffer' because
           ;; the height is not known in advance.
           (window-height . 0.4))
          ("magit: .*"
           (display-buffer-reuse-mode-window display-buffer-below-selected)
           (window-height . 0.4))
          ("\\*\\(Calendar\\|Bookmark Annotation\\).*"
           (display-buffer-reuse-mode-window display-buffer-below-selected)
           (window-height . fit-window-to-buffer))))

  (defvar resize-window-repeat-map
    (let ((map (make-sparse-keymap)))
      ;; Standard keys:
      (define-key map "^" 'enlarge-window)
      (define-key map "}" 'enlarge-window-horizontally)
      (define-key map "{" 'shrink-window-horizontally) ; prot note: those three are C-x KEY
      ;; Additional keys:
      (define-key map "v" 'shrink-window) ; prot note: this is not bound by default
      map)
    "Keymap to repeat window resizing commands.  Used in `repeat-mode'.")
  (put 'enlarge-window 'repeat-map 'resize-window-repeat-map)
  (put 'enlarge-window-horizontally 'repeat-map 'resize-window-repeat-map)
  (put 'shrink-window-horizontally 'repeat-map 'resize-window-repeat-map)
  (put 'shrink-window 'repeat-map 'resize-window-repeat-map)

  (setq fit-window-to-buffer-horizontally t)

  (let ((map global-map))
    (define-key map (kbd "C-x <down>") #'next-buffer)
    (define-key map (kbd "C-x <up>") #'previous-buffer)
    (define-key map (kbd "C-x C-n") #'next-buffer)     ; override `set-goal-column'
    (define-key map (kbd "C-`") #'next-buffer)
    (define-key map (kbd "C-x C-p") #'previous-buffer) ; override `mark-page'
    (define-key map (kbd "C-~") #'previous-buffer)
    (define-key map (kbd "C-x !") #'delete-other-windows-vertically)
    (define-key map (kbd "C-x _") #'balance-windows)      ; underscore
    (define-key map (kbd "C-x -") #'fit-window-to-buffer) ; hyphen
    (define-key map (kbd "C-x +") #'balance-windows-area)
    (define-key map (kbd "C-x }") #'enlarge-window)
    (define-key map (kbd "C-x {") #'shrink-window)
    (define-key map (kbd "C-x >") #'enlarge-window-horizontally) ; override `scroll-right'
    (define-key map (kbd "C-x <") #'shrink-window-horizontally)) ; override `scroll-left'

  (add-hook 'help-mode-hook #'visual-line-mode)
  (add-hook 'custom-mode-hook #'visual-line-mode)
  (add-hook 'eww-mode-hook #'visual-line-mode)
  (add-hook 'text-mode-hook #'visual-line-mode))

(lp-emacs-builtin-package 'winner
  (winner-mode t)     ; move between windows configuration
  )
#+end_src
** displaying the time
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'time
  (setq display-time-world-time-format "%H:%M %Z, %d. %b"
        display-time-world-list '(("America/New_York" "New York (USA)")
                                  ("America/Winnipeg" "Winnipeg (CA)")
                                  ("Asia/Tokyo"       "Tokyo (JP)")
                                  ("Europe/London"    "London")
                                  ("Europe/Istanbul"  "Istanbul")
                                  ))
  (setq display-time-default-load-average 0
        display-time-use-mail-icon t
        display-time-24hr-format t
        display-time-day-and-date t)

  (display-time-mode 1))
#+end_src
** man mode, info mode, WoMan
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'man
  (define-key Man-mode-map (kbd "i") #'Man-goto-section)
  (define-key Man-mode-map (kbd "g") #'Man-update-manpage))
#+end_src
** saving the state of emacs
*** emacs server

Starting a server will allow the quick access of emacs through a server connection rather
than having to open and load a full configuration every time.

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'server
  (add-hook 'after-init-hook #'server-start))
#+end_src
*** desktop
I have a love-hate relationship with =desktop=. I haven't read the manual enough to
find the right configuration required to have a more seamless start-up and shut-down. But
it remains. At the moment I store no buffers or frames to load from since that generates
too much friction on startup.

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'desktop
  (setq desktop-auto-save-timeout 300)
  (setq desktop-path `(,user-emacs-directory))
  (setq desktop-base-file-name "desktop")
  (setq desktop-files-not-to-save ".*")
  (setq desktop-buffers-not-to-save ".*")
  (setq desktop-globals-to-clear nil)
  (setq desktop-load-locked-desktop t)
  (setq desktop-missing-file-warning nil)
  (setq desktop-restore-eager 0)
  (setq desktop-restore-frames nil)
  (setq desktop-save 'ask-if-new)
  (dolist (symbol '(kill-ring log-edit-comment-ring))
    (add-to-list 'desktop-globals-to-save symbol))

  (desktop-save-mode 1))
#+end_src

*** saveplace
Saving the cursor position in a file is a subtle hint of what you were doing. Its also
relatively convenient

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'saveplace
  ;; :diminish
  (setq save-place-file (locate-user-emacs-file "saveplace"))
  (setq save-place-forget-unreadable-files t)
  (save-place-mode 1)
  )
#+end_src
** visualizing whitespace
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'whitespace
  (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark)))
  (add-hook 'java-mode-hook #'whitespace-mode))
#+end_src
** adding sensible advice around built-in functions
- Add advice to =kill-region= and =kill-ring-save= to kill/save the current line if there is
  no active region
- Add advice to =kmacro-*= calling functions to allow a block-undo operation. This allows
  =undo= to undo an entire macro call rather than each atom of the macro.

#+begin_src emacs-lisp
(defun lp--provide-mark-line-or-region (&rest args)
  "Force interactive arguments to provide (current line->current
  line + 1) if no active region. Otherwise, provide the original
  parameter specification (mark, point, 'region). `ARGS' discarded"
  (interactive
   (if mark-active
       (list (mark) (point) 'region)
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(advice-add 'kill-ring-save :before #'lp--provide-mark-line-or-region)
(advice-add 'kill-region :before #'lp--provide-mark-line-or-region)

(define-advice load-theme (:before (&rest args) disable-active-themes)
  "Disable all active themes before loading a new theme."
  (mapc #'disable-theme custom-enabled-themes))

(defun block-undo (fn &rest args)
  "Wrap function `FN' with `ARGS' and allow block-undo of the the `FN'
  operation rather than atomized undo for each interactive emacs
  function."
  (let ((marker (prepare-change-group)))
    (unwind-protect (apply fn args)
      (undo-amalgamate-change-group marker))))

(dolist (fn '(kmacro-call-macro
              kmacro-exec-ring-item
              dot-mode-execute
              apply-macro-to-region-lines))
  (advice-add fn :around #'block-undo))
#+end_src
** handling very long lines
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'so-long
  (global-so-long-mode +1))
#+end_src
* aesthetics
** some themes i've liked
General aesthetic configurations for emacs
*** new ones
- ~eziam-theme~ -- monochrome based on leuven
- ~poet~ -- writing-optimized theme
- ~faff~ -- nice lil paper theme
- ~autumn-theme~ -- autumn theme and all that, similar to faff
- ~green-screen~ -- oldschool hilarity. too ridiculous
- soft stone
- plan9
- solarized gruvbox light f
*** old ones

- espresso ; cyberpunk ; moe-light ;

good themes
- base16
  - zenburn
  - unikitty light
  - solarized light
  - rebecca
  - porple
  - phd
  - ocean
  - nord
  - monokai
  - mocha
  - mellow-purple
  - material + material palenight
  - harmonic-{light,dark}
  - cupertino
  - cupcake
  - sulphurpool-light
  - heath-light
  - cave-light
  - classic-{dark,light}
  - avk-daylight

- actual good themes
  - leuven / parchment (https://github.com/ajgrf/parchment)
  - porple
  - doom-tomorrow-night
    - Any of the doom ones really
  - Habamax Theme - a little plain
  - Also hydanatantantatna-theme
  - gruvbox
  - tsdh-light
  - tron theme https://github.com/ianpan870102/Emacs-Tron-Legacy-Theme
  - Naysayer-theme https://github.com/nickav/naysayer-theme.el
  - That one black theme i'm using right now (6/15/19)

** color design
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'ct)
(lp-emacs-elpa-package 'rainbow-mode
  (setq rainbow-ansi-colors nil)
  (setq rainbow-x-colors nil))
#+end_src
** personal theme
Some modifications to the built-in theme I'm playing with. Playing around with some
[[https://protesilaos.com/codelog/2020-08-28-notes-emacs-theme-devs/][advice from Prot]] in
building my own kind of theme. Right now its a direct rip of the [[https://github.com/rocher/ubuntu-theme][ubuntu-theme]] package (last
updated 2015 as of writing [2022-03-06 Sun 15:16]).

- [ ] variable-pitch with ~Quicksand~ as the non-monospaced font

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")

;; (require 'lp-theme)
(load-theme 'modus-vivendi)
(set-frame-font "DejaVu Sans Mono 14")

;; (modify-all-frames-parameters
;;  '((right-divider-width . 40)
;;    (internal-border-width . 40)))
;; (dolist (face '(window-divider
;;                 window-divider-first-pixel
;;                 window-divider-last-pixel))
;;   (face-spec-reset-face face)
;;   (set-face-foreground face (face-attribute 'default :background)))
;; (set-face-background 'fringe (face-attribute 'default :background))

;; (set-frame-font "Quicksand Medium 14")

;; (face-attribute 'default :font)
;; #<font-object "-PfEd-Quicksand Medium-normal-normal-normal-*-16-*-*-*-*-0-iso10646-1"> funny font that auto-loaded somehow which i'm kinda vibing with
#+end_src

** modus themes
=modus-themes= is simply the GOAT at this point. Not much more to say than that.

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'modus-themes
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-mixed-fonts nil
        modus-themes-subtle-line-numbers t
        modus-themes-intense-mouseovers nil
        modus-themes-deuteranopia nil
        modus-themes-tabs-accented t
        modus-themes-variable-pitch-ui nil
        modus-themes-inhibit-reload nil ; only applies to `customize-set-variable' and related

        modus-themes-fringes nil ; {nil,'subtle,'intense}

        ;; Options for `modus-themes-lang-checkers' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `straight-underline', `text-also', `background',
        ;; `intense' OR `faint'.
        modus-themes-lang-checkers '(straight-underline background)

        ;; Options for `modus-themes-mode-line' are either nil, or a list
        ;; that can combine any of `3d' OR `moody', `borderless',
        ;; `accented', a natural number for extra padding (or a cons cell
        ;; of padding and NATNUM), and a floating point for the height of
        ;; the text relative to the base font size (or a cons cell of
        ;; height and FLOAT)
        modus-themes-mode-line '(accented 3d)

        ;; Same as above:
        ;; modus-themes-mode-line '(accented borderless 4 0.9)

        ;; Options for `modus-themes-markup' are either nil, or a list
        ;; that can combine any of `bold', `italic', `background',
        ;; `intense'.
        modus-themes-markup '(bold italic background)

        ;; Options for `modus-themes-syntax' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `faint', `yellow-comments', `green-strings', `alt-syntax'
        modus-themes-syntax '(green-strings yellow-comments alt-syntax)

        ;; Options for `modus-themes-hl-line' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `accented', `underline', `intense'
        modus-themes-hl-line '(underline)

        ;; Options for `modus-themes-paren-match' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `bold', `intense', `underline'
        modus-themes-paren-match '(bold intense)

        ;; Options for `modus-themes-links' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
        ;; `bold', `italic', `background'
        modus-themes-links '(neutral-underline background)

        ;; Options for `modus-themes-box-buttons' are either nil (the
        ;; default), or a list that can combine any of `flat', `accented',
        ;; `faint', `variable-pitch', `underline', `all-buttons', the
        ;; symbol of any font weight as listed in `modus-themes-weights',
        ;; and a floating point number (e.g. 0.9) for the height of the
        ;; button's text.
        modus-themes-box-buttons '(variable-pitch flat faint 0.9)

        ;; Options for `modus-themes-prompts' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `background', `bold', `gray', `intense', `italic'
        modus-themes-prompts '(intense bold)

        ;; The `modus-themes-completions' is an alist that reads three
        ;; keys: `matches', `selection', `popup'.  Each accepts a nil
        ;; value (or empty list) or a list of properties that can include
        ;; any of the following (for WEIGHT read further below):
        ;;
        ;; `matches' - `background', `intense', `underline', `italic', WEIGHT
        ;; `selection' - `accented', `intense', `underline', `italic', `text-also' WEIGHT
        ;; `popup' - same as `selected'
        ;; `t' - applies to any key not explicitly referenced (check docs)
        ;;
        ;; WEIGHT is a symbol such as `semibold', `light', or anything
        ;; covered in `modus-themes-weights'.  Bold is used in the absence
        ;; of an explicit WEIGHT.
        modus-themes-completions '((matches . (extrabold))
                                   (selection . (semibold accented))
                                   (popup . (accented intense)))

        modus-themes-mail-citations nil ; {nil,'intense,'faint,'monochrome}

        ;; Options for `modus-themes-region' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `no-extend', `bg-only', `accented'
        modus-themes-region '(bg-only no-extend)

        ;; Options for `modus-themes-diffs': nil, 'desaturated, 'bg-only
        modus-themes-diffs 'desaturated

        modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

        modus-themes-org-agenda ; this is an alist: read the manual or its doc string
        '((header-block . (variable-pitch 1.2))
          (header-date . (grayscale workaholic bold-today 1.1))
          (event . (accented varied))
          (scheduled . uniform)
          (habit . traffic-light))

        modus-themes-headings ; this is an alist: read the manual or its doc string
        '((1 . (overline background variable-pitch 1.2))
          (2 . (rainbow overline 1.1))
          (t . (semibold))))
  (modus-themes-load-vivendi))
#+end_src

** anti-bright themes, a soft low-contrast light theme
#+begin_src emacs-lisp :tangle no
;; only enable when not terminal mode?
(lp-emacs-elpa-package 'twilight-anti-bright-theme)
(lp-emacs-elpa-package 'twilight-bright-theme)
#+end_src
* movement and editing
** isearch and replace
=isearch= isn't gonna go out of style anytime soon that's for sure. And especially not if
you know some of the configuration options. Below is configured for isearch to "fuzzy
search" on its candidates. This is accomplished by setting =search-whitespace-regexp= to
match =.*?=, i.e all characters are whitespace.

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'isearch
  ;; :diminish
  (setq search-highlight t)
  (setq search-whitespace-regexp ".*?")
  (setq isearch-lax-whitespace t)
  (setq isearch-regexp-lax-whitespace nil)
  (setq isearch-lazy-highlight t)

  ;; All of the following variables were introduced in Emacs 27.1.
  (setq isearch-lazy-count t)
  (setq lazy-count-suffix-format " {%s/%s}")
  (setq lazy-count-prefix-format nil)
  (setq isearch-yank-on-move 'shift)
  (setq isearch-allow-scroll 'unlimited)
  ;; Emacs 28
  (setq isearch-repeat-on-direction-change t)
  (setq lazy-highlight-initial-delay 0.5)
  (setq lazy-highlight-no-delay-length 3)
  (setq isearch-wrap-pause t)


  (define-key minibuffer-local-isearch-map (kbd "M-/") #'isearch-complete-edit)
  (let ((map isearch-mode-map))
    ;; (define-key map (kbd "C-g") #'isearch-cancel) ; instead of `isearch-abort'
    (define-key map (kbd "C-g") #'isearch-abort)
    (define-key map (kbd "M-/") #'isearch-complete)))

(require 'replace)

(define-key global-map (kbd "M-s M-o") 'multi-occur)
(define-key occur-mode-map (kbd "t") 'toggle-truncate-lines)
(add-hook 'occur-mode-hook #'(lambda () (interactive) (toggle-truncate-lines t)))
(add-hook 'occur-mode-hook #'hl-line-mode)

(setq list-matching-lines-jump-to-current-line t)

#+end_src

** avy
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'avy
  (avy-setup-default) ;; binds C-' in the isearch map :O
  (define-key global-map (kbd "C-'") 'avy-goto-char-timer)
  (define-key global-map (kbd "M-'") 'avy-resume))
#+end_src
* minibuffer, completion, and symbol definitions
** general minibuffer completion configuration
completion options, minibuffer options, minibuffer history options, prompt faces, ...
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'minibuffer

  (setq completion-show-inline-help t)
  (setq completions-detailed t)
  (setq completion-ignore-case t)

  ;; always allow tab cycle, except if you're running `completion-at-point', in which case
  ;; we want to always allow completion to help us. If we invoke `c-a-p', then set the
  ;; threshold to `nil' in the current buffer.
  (setq completion-cycle-threshold nil)
  ;;   (defun lp--no-cycle-for-completion-at-point (&rest args)
  ;;     "Set `completion-cycle-threshold' to NIL for the current buffer
  ;; if we invoke `completion-at-point'. `completion-cycle-threshold'
  ;; will retain its original value in any invoked minibuffer commands
  ;; since the value is set locally."
  ;;     (setq-local completion-cycle-threshold nil))
  ;;   (advice-add 'completion-at-point :before #'lp--no-cycle-for-completion-at-point)

  ;; emacs28 completion stuff
  (setq completions-group t)
  (setq completions-group-sort nil)


  (setq enable-recursive-minibuffers t)
  (require 'minibuf-eldef)
  (setq minibuffer-eldef-shorten-default t) ;; default completion in [bracks]

  (setq read-buffer-completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)

  (setq resize-mini-windows t)

  (file-name-shadow-mode 1)
  (minibuffer-depth-indicate-mode 1)
  (minibuffer-electric-default-mode 1) ;; update default completion if change

  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  ;; (defun crm-indicator (args)
  ;;   (cons (concat "[CRM] " (car args)) (cdr args)))
  ;; (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (setq suggest-key-bindings t))

       ;;; Minibuffer history
(lp-emacs-builtin-package 'savehist
  (setq savehist-file (locate-user-emacs-file "savehist"))
  (setq history-length 10000)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history t)
  (add-hook 'after-init-hook #'savehist-mode))
#+end_src

** consult    -- enhanced minibuffer completion functions and utilities
consult is an important set of utilities that extend a number of important built-in
functions (like =list-buffers=, =goto-line=), where comprehensive completions and
additional utilities are provided within-command.

I set up a number of consult maps for quick access to important commands. Notable maps are
the =consult-goto-map= containing any "jumping" commands such as =imenu=, =outline=, and
so forth, and the =consult-search-map= containing any "searching" commands such as
=ripgrep=, =isearch=, and so forth.

Importantly: =consult= is can be used for word completion in terminal mode when a visual
posframe-based or frame-based completion utility, e.g. =corfu= can't be displayed. It
doesn't play well with lsp, but i haven't heard anything about =eglot=.

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'consult
  (setq consult-goto-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "e") 'consult-compile-error)
          (define-key map (kbd "l") 'consult-flymake)
          (define-key map (kbd "f") 'consult-flymake)               ;; Alternative: consult-flycheck
          (define-key map (kbd "o") 'consult-outline)               ;; Alternative: consult-org-heading
          (define-key map (kbd "m") 'consult-mark)
          (define-key map (kbd "k") 'consult-global-mark)
          (define-key map (kbd "i") 'consult-imenu)
          (define-key map (kbd "I") 'consult-imenu-multi)
          (define-key map (kbd "b") #'consult-bibtex)               ;; Needs to be done here else we need to re-create and bind the keymap. w/e.
          map))

  (let ((map global-map))
    ;; Custom M-# bindings for fast register access
    (define-key map (kbd "C-x r l") 'consult-register-load)
    (define-key map (kbd "C-x r s") 'consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
    (define-key map (kbd "C-x r r") 'consult-register)
    (define-key map (kbd "C-x r b") 'consult-bookmark))

  (setq consult-mode-mode-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "h") 'consult-history)
          (define-key map (kbd "m") 'consult-mode-command)
          (define-key map (kbd "k") 'consult-kmacro)
          map))

  (setq consult-search-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "f") 'consult-find)
          (define-key map (kbd "F") 'consult-locate)
          (define-key map (kbd "g") 'consult-grep)
          (define-key map (kbd "G") 'consult-git-grep)
          (define-key map (kbd "r") 'consult-ripgrep)
          (define-key map (kbd "l") 'consult-line)
          (define-key map (kbd "L") 'consult-line-multi)
          (define-key map (kbd "m") 'consult-multi-occur)
          (define-key map (kbd "k") 'consult-keep-lines)
          (define-key map (kbd "u") 'consult-focus-lines)
          (define-key map (kbd "j") 'consult-recent-file)
          (define-key map (kbd "s") 'consult-isearch)
          (define-key map (kbd "o") 'occur)
          (define-key map (kbd "C-o") 'occur)
          map))
  (define-key global-map (kbd "M-s") consult-search-map)
  (define-key global-map (kbd "M-j") consult-goto-map)
  (define-key global-map (kbd "M-M") consult-mode-mode-map)
  (define-key global-map (kbd "C-c y l") 'consult-flymake)
  (define-key global-map (kbd "M-g M-g") 'consult-goto-line)             ;; orig. goto-line

  (define-key global-map (kbd "C-x b") 'consult-buffer)
  (define-key global-map (kbd "C-M-y") 'consult-yank-pop)
  (define-key global-map (kbd "C-:") 'consult-complex-command)
  (define-key global-map [remap apropos-command] 'consult-apropos)

  (setq consult-preview-key (kbd "C-o") ) ;; disable live preview
  ;; (setq consult-project-root-function #'project-roots)
  (setq consult-async-min-input 3)
  (setq consult-async-input-debounce 0.5)
  (setq consult-async-input-throttle 0.8)
  (setq consult-narrow-key "<")
  :config
  (setf (alist-get 'slime-repl-mode consult-mode-histories)
        'slime-repl-input-history)
  (setq xref-show-xrefs-function #'consult-xref)
  (setq xref-show-definitions-function #'consult-xref)
  (define-key completion-list-mode-map (kbd "C-o") #'consult-preview-at-point)

  ;; (setq completion-in-region-function #'consult-completion-in-region)
  )

(lp-emacs-elpa-package 'consult-dir
  (define-key global-map (kbd "C-x C-d") 'consult-dir)
  (define-key minibuffer-local-completion-map (kbd "C-x C-d") 'consult-dir)
  (define-key minibuffer-local-completion-map (kbd "C-x C-j") 'consult-dir-jump-file))


#+end_src
** embark     -- Mini-buffer actions rooted in Keymaps (contextual actions)

An absolute beast of a package in its design and possible use-cases. Whether you're
unmarked, in minibuffer, in an =info-mode= buffer, Embark will gather useful actions for
you to execute.

Over time I hope to have a better intuition for the situations in which this package can
shine, but for now I'm using it mostly for =embark-export= for batched editing operations.

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'embark
  (define-key global-map (kbd "C->") 'embark-become)
  (define-key global-map (kbd "M-a") 'embark-act)
  (define-key completion-list-mode-map (kbd "M-a")
    #'(lambda () (interactive) () (mct-focus-mini-or-completions) (embark-act))))

(lp-emacs-elpa-package 'embark-consult
  (define-key embark-collect-mode-map (kbd "o") 'consult-preview-at-point)
  ;; :hook (embark-collect-mode . embark-consult-preview-minor-mode)
  )
#+end_src

** marginalia -- enhanced minibuffer detail display

Enhanced minibuffer information when using =switch-to-buffer=, =find-file=,
=describe-variable=, etc.

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'marginalia
  (setq marginalia-max-relative-age 0)  ; time is absolute here!
  (marginalia-mode 1)
  (with-eval-after-load 'mct
    (progn
      (setq mct-apply-completion-stripes t))))
#+end_src
** orderless  -- orderless filtering and mapping of symbols

For matching symbols without regard for order, we use =orderless=.

Can be not very performant depending on the matching styles (=orderless-flex= being the
worst offender). A big configuration dream is for =orderless= to work as seamlessly as the
usual completion utilities.

When =orderless-flex= is enabled, a postfixed =,= can be used to match a literal
string, defined by the function =literal-if-comma=. To match everything but a string,
prefix the string with a "bang" =!=.

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'orderless
  (setq completion-styles '(basic orderless))
  (setq completion-category-defaults nil
        completion-category-overrides '((file (styles . (basic partial-completion initials substring)))
                                        (project-file (styles . (basic substring partial-completion orderless)))
                                        (imenu (styles . (basic substring orderless)))
                                        (kill-ring (styles . (basic substring orderless)))
                                        (consult-location (styles . (basic substring orderless)))))
  (setq orderless-matching-styles '(orderless-prefixes
                                    orderless-initialism
                                    orderless-regexp))

  (defun literal-if-comma (pattern _index _total)
    (when (string-suffix-p "," pattern)
      `(orderless-literal . ,(substring pattern 0 -1))))

  (defun flex-if-tilde (pattern _index _total)
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))

  (defun initialism-if-eql (pattern _index _total)
    (when (string-suffix-p "=" pattern)
      `(orderless-initialism . ,(substring pattern 0 -1))))

  (defun without-if-bang (pattern _index _total)
    (cond
     ((equal "!" pattern)
      '(orderless-literal . ""))
     ((string-prefix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1)))))

  (setq orderless-style-dispatchers '(literal-if-comma without-if-bang flex-if-tilde initialism-if-eql))

  (define-key minibuffer-local-completion-map (kbd "SPC") nil)
  (define-key minibuffer-local-completion-map (kbd "?") nil)
  ;; SPC should never complete: use it for `orderless' groups.
  )
#+end_src
** affe       -- a fzf-like for Emacs built on top of Consult (using Orderless)
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'affe
  (require 'orderless)
  (consult-customize affe-grep :preview-key (kbd "C-o"))
  ;; ;; -*- lexical-binding: t -*-
  ;; (defun affe-orderless-regexp-compiler (input _type _ignorecase)
  ;;   (setq input (orderless-pattern-compiler input))
  ;;   (cons input (lambda (str) (orderless--highlight input str))))

  ;; (setq affe-regexp-compiler #'affe-orderless-regexp-compiler)
  (setq affe-highlight-function #'orderless-highlight-matches
        affe-regexp-function #'orderless-pattern-compiler)
  (define-key global-map (kbd "M-s r") #'affe-grep)
  (define-key global-map (kbd "M-s f") #'affe-find)
  )
#+end_src

** vertico    -- VERTical Interactive COmpletion
I'm kind of sick of the acronyms that only take pieces of words, but I like the package so
it gets a pass.

TODOs:
- [ ] Minad has gone super hard on this package since I've last used it (around Jan2022),
  with tons of extensions for fine-grained tweaking of the interface
  (e.g. {~ivy~,~ido~,~helm~}-like interface possibilities)
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'vertico
  (vertico-mode)
  (setq vertico-resize nil)
  (setq vertico-cycle t)
  (let ((map vertico-map))
    (define-key map (kbd "M-,") #'vertico-quick-insert)
    (define-key map (kbd "M-.") #'vertico-quick-exit))
  ;; This works with `file-name-shadow-mode'.  When you are in a
  ;; sub-directory and use, say, `find-file' to go to your home '~/' or
  ;; root '/' directory, Vertico will clear the old path to keep only
  ;; your current input.
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))
#+end_src
** corfu      -- Completion Overlay Region FUnction
Again, hate the multi-letter-per-word acronym but its a good package.

TODOs:
- [ ] Lots of really good documentation and information in the README and documentation of ~corfu~.
- [ ] Lots of really good documentation on making ~corfu~ play nice with LSP and Eglot,
  something I've had a problem with in the past.

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'corfu
  ;; Optional customizations
  ;; :custom
  (setq corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  (setq corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-excluded-modes'.
  (global-corfu-mode)

    ;;;;; Experimental corfu activation when vertico/mct aren't active
  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      ;; (setq-local corfu-auto nil) Enable/disable auto completion
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

    ;;;;; corfu in eshell
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-auto nil)
              (corfu-mode)))
  (defun corfu-send-shell (&rest _)
    "Send completion candidate when inside comint/eshell."
    (cond
     ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
      (eshell-send-input))
     ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
      (comint-send-input))))

  (advice-add #'corfu-insert :after #'corfu-send-shell)

  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)

    ;;;;; Allow moving of the current Corfu completion to the minibuffer (!!!)
  (defun corfu-move-to-minibuffer ()
    (interactive)
    (let ((completion-extra-properties corfu--extra)
          completion-cycle-threshold completion-cycling)
      (apply #'consult-completion-in-region completion-in-region--data)))
  (define-key corfu-map "\M-m" #'corfu-move-to-minibuffer)
  )

#+end_src

*** corfu-terminal -- corfu using ~popup~ / ~popon~, allowing terminal use
#+begin_src emacs-lisp
(lp-emacs-git-package
    'popon "https://codeberg.org/akib/emacs-popon.git")
(lp-emacs-git-package
    'corfu-terminal "https://codeberg.org/akib/emacs-corfu-terminal"
    (unless (display-graphic-p)
      (corfu-terminal-mode +1)))
#+end_src

*** Cape -- Completion At Point Extensions
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'cape
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src

** tempel     -- Simple templates for Emacs
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'tempel
  (let ((map global-map))
    (define-key map (kbd "M-+") #'tempel-complete)
    (define-key map (kbd "M-*") #'tempel-insert))

  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)
  )
#+end_src

** [unused, dead] mct  -- minimalist minibuffer completion visualization :noexport:
[2021-12-06] I gave it a serious try but MCT isn't gonna cut it. I'd like my
completions to be done quicker.

[2021-12-28 Tue] hoho just kidding im back at it :)

[2022-05-15 Sun 17:21] Update: ~MCT~ development has now been discontinued, so to
speak. Prot will no longer support this package as Emacs 29 will have built-in functionality
providing much of what this package set out to accomplish. Leaving this here for historical
purposes. I'll be moving back to ~vertico~ and ~corfu~ for completion utility and removing
this section soon.

=vertico= has this weird problem when using =<RET>= to complete: it still takes time to
narrow down the larger list at completion time. With MCT, that penalty is up-front rather
than at-completion-time, which I much prefer. Amortized, MCT actually ends up faster with
larger =completing-read= calls.

=mct= now has a =completion-in-region= substitute to rival =corfu= with only built-in
capabilities of the =*Completions*= buffer. Very exciting, this is my go-to now. Especially
since =completion-at-point= with =mct= allows orderless style dispatching (e.g. =fffa==
completes to =face-font-family-alternatives= with my === style dispatch to "strict leading
initialism"

#+begin_src emacs-lisp :tangle no
(lp-emacs-elpa-package 'mct
  (setq mct-remove-shadowed-file-names t) ; works when `file-name-shadow-mode' is enabled
  (setq mct-hide-completion-mode-line t)
  (setq mct-show-completion-line-numbers nil)
  (setq mct-minimum-input 4)
  (setq mct-live-update-delay 0.6)
  (setq mct-completions-format 'one-column)
  (setq mct-live-completion 'visible)

  ;; NOTE: `mct-completion-blocklist' can be used for commands with lots
  ;; of candidates, depending also on how low `mct-minimum-input' is.
  ;; With the settings shown here this is not required, otherwise I would
  ;; use something like this:
  ;;
  (setq mct-completion-blocklist
        '( describe-symbol describe-function describe-variable
           execute-extended-command insert-char))

  ;; This is for commands that should always pop up the completions'
  ;; buffer.  It circumvents the default method of waiting for some user
  ;; input (see `mct-minimum-input') before displaying and updating the
  ;; completions' buffer.
  (setq mct-completion-passlist
        '(imenu
          Info-goto-node
          Info-index
          Info-menu
          vc-retrieve-tag
          Man-follow-manual-reference
          Man-goto-section))

  ;; You can place the Completions' buffer wherever you want, by following
  ;; the syntax of `display-buffer'.  For example, try this:

  ;; (setq mct-display-buffer-action
  ;;       (quote ((display-buffer-reuse-window
  ;;                display-buffer-in-side-window)
  ;;               (side . left)
  ;;               (slot . 99)
  ;;               (window-width . 0.3))))

  (mct-minibuffer-mode +1)
  (mct-region-mode +1)
  ;; (define-key vertico-map (kbd "M-RET") #'minibuffer-force-complete-and-exit)
  ;; (define-key vertico-map (kbd "M-TAB") #'minibuffer-complete)

  )
#+end_src

** which-key

I use =which-key= to discover new useful commands hiding in a keymap prefix. That's pretty
much it, but its proven itself tremendously helpful for exploring features of the built-in
or of a new package.

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'which-key
  ;;:diminish which-key-mode
  (which-key-mode 1))
#+end_src
** built-in completion utilities (abbrev, dabbrev)

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'abbrev
  (setq abbrev-suggest t)
  (setq save-abbrevs 'silently)
  (setq abbrev-file-name (locate-user-emacs-file "abbrevs"))
  (setq only-global-abbrevs nil))

(lp-emacs-builtin-package 'dabbrev
  (define-key global-map (kbd "M-/") 'dabbrev-completion)
  (define-key global-map (kbd "C-M-/") 'dabbrev-expand)
  (setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_") ;; same as nil technically
  (setq dabbrev-abbrev-skip-leading-regexp "[$*/=~']")
  (setq dabbrev-backward-only nil)
  (setq dabbrev-case-distinction 'case-replace)
  (setq dabbrev-case-fold-search nil)
  (setq dabbrev-case-replace 'case-replace)
  (setq dabbrev-check-other-buffers t)
  (setq dabbrev-eliminate-newlines t)
  (setq dabbrev-upcase-means-case-search t))

#+end_src
** xref

Its debatable whether xref should be in this section. May re-evaluate in future.

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'xref
  ;; All these have been changed for Emacs 28
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read) ; for M-.
  (setq xref-show-xrefs-function #'xref-show-definitions-buffer) ; for grep and the like
  (setq xref-file-name-display 'project-relative)
  (setq xref-search-program 'ripgrep)
  )
#+END_SRC
** dumb jump
#+begin_src emacs-lisp :tangle no
(lp-emacs-elpa-package 'dumb-jump
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  (setq dumb-jump-prefer-searcher 'grep))
#+end_src

* reading, writing, and task keeping
** text-mode
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'text-mode
  (add-hook 'text-mode-hook
            #'(lambda ()
                (interactive)
                (setq-local paragraph-start "\\|\\*\\| *-\\| *[1-9]\\.\\|[ 	]*$"))))
#+end_src
** outline-mode
- ~text-mode~ derived, so invoking ~outline-mode~ also invokes ~text-mode-hook~
- ~C-c @~ prefix in ~outline-minor-mode~
- ~consult-outline~ matches regexp defined in the ~outline-regexp~ variable

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'outline
  ;; See ./templates in text-mode: h1,h2 should both match this regexp
  ;; to generate an outline in simple text notes
  (setq outline-regexp "^= .+ =\n=+$\\|^- .+ -\n-+$\\|^[*]+"))
#+end_src

** latex
#+begin_src emacs-lisp
;; auctex requires special configuration..
;;
;; system needs:
;; - tex installation
;; - texinfo
;; - ghostscript
;; not yet convinced auctex is a necessary component of my workflow. it provides
;; utilities that could easily be provided by snippets and cdlatex. Time will tell
;;
;; set dont-use-auctex-scope to NIL if you want to use auctex
(if-let ((dont-use-auctex-scope nil))
    nil
  (when (not (package-installed-p 'auctex))
    (package-install 'auctex))
  (setq reftex-plug-into-AUCTeX t)
  ;; revert pdf-view after compilation
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  ;; for syncing output compilation to buffer
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t
        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex)

  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  ;; most crucial: turn-on-reftex
  (setq lp--latex-hooks-fns '(auto-fill-mode TeX-source-correlate-mode flyspell-mode flyspell-buffer turn-on-reftex))
  (dolist (fn lp--latex-hooks-fns)
    (add-hook 'LaTeX-mode-hook fn)))

(lp-emacs-builtin-package 'tex-mode)

(lp-emacs-builtin-package 'reftex)

(lp-emacs-elpa-package 'cdlatex
  (add-hook 'latex-mode-hook #'cdlatex-mode))
#+end_src
** org
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'org
  ;; TODO: fix this with the right straight source
  ;; (unbind-key (kbd "C-'") org-mode-map)
  ;; (unbind-key (kbd "C-c C-j") org-mode-map)
  (defun org-file-path (filename)
    "Return absolute address of an org file give its relative name."
    (concat (file-name-as-directory org-directory) filename))

  ;;; org latex interplay
  (setq-default org-highlight-latex-and-related '(native latex script entities))
  (setq org-latex-listings 'minted) ;; export source code with color+font
  (setq org-startup-folded t)
  (setq org-pretty-entities t)
  (setq org-pretty-entities-include-sub-superscripts nil) ; not a fan of hidden characters
  (setq org-indirect-buffer-display #'current-window)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))


  ;;; babel
  ;; NOTE: If this isn't working, make sure to delete /
  ;; byte-recompile the /elpa/org/.. directory.
  ;; enable language compiles
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (gnuplot . t)))

  (setq org-src-window-setup 'plain) ;; let display-buffer handle it
  (setq org-confirm-babel-evaluate nil)
  (setq org-edit-src-persistent-message nil)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 0)

  ;;; general org configuration. Lots of inspiration and discovery from Prot's org configuration (glad he RTFM!)
  (setq org-directory "~/org/")
  (setq org-inbox-directory org-directory)
  (setq org-imenu-depth 7)
  (setq org-special-ctrl-a/e nil)
  (setq org-special-ctrl-k nil)
  (setq org-hide-emphasis-markers nil)
  (setq org-M-RET-may-split-line '((default . nil)))
  (setq org-hide-leading-stars nil)
  (setq org-cycle-separator-lines 0)
  (setq org-structure-template-alist
        '(("s" . "src")
          ("E" . "src emacs-lisp")
          ("e" . "example")
          ("q" . "quote")
          ("v" . "verse")
          ("V" . "verbatim")
          ("c" . "center")
          ("C" . "comment")))
  (setq org-catch-invisible-edits 'show)
  (setq org-return-follows-link nil)
  (setq org-loop-over-headlines-in-active-region 'start-level)
  (setq org-use-sub-superscripts '{})   ; not a big fan of the ambiguity
  (setq org-insert-heading-respect-content t)


  ;; tags
  (setq org-tags-match-list-sublevels t)

  ;; refile
  ;; (setq org-refile-targets `(,(mapcar
  ;;                              (lambda (x)
  ;;                                (mapcar (lambda (f) (cons f '(:maxlevel . 2)))
  ;;                                        (directory-files x t ".*.org$")))
  ;;                              '("~/org/roam/" "~/org/roam/daily/"))
  ;;                            (nil . (:maxlevel . 2))))

  (setq org-refile-targets nil)


  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps t)
  (setq org-refile-allow-creating-parent-nodes 'confirm) ; allow creating new parents on refile
  (setq org-refile-use-cache t)

  ;; todos
  (setq org-reverse-note-order nil)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "MAYBE(m)" "WAIT(w@/!)" "|" "CANCEL(c@)" "DONE(d!)")))
  (setq org-todo-keyword-faces
        '(("WAIT" . '(bold org-todo))
          ("MAYBE" . '(bold shadow))
          ("CANCEL" . '(bold org-done))))
  (setq org-use-fast-todo-selection 'expert)
  (setq org-priority-faces
        '((?A . '(bold org-priority))
          (?B . org-priority)
          (?C . org-priority)
          (?D . '(shadow org-priority))))
  (setq org-fontify-done-headline nil)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-fontify-whole-heading-line nil)
  (setq org-fontify-whole-block-delimiter-line nil)
  (setq org-highlight-latex-and-related nil) ; other options affect elisp regexp in src blocks
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
  (setq org-track-ordered-property-with-tag t)
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?D)
  (setq org-default-priority ?A)

  ;;; logging
  (setq org-log-done 'time)             ; also record when the TODO was archived
  (setq org-log-into-drawer t)
  (setq org-log-note-clock-out nil)
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)
  (setq org-read-date-prefer-future 'time)

  ;;; links
  (setq org-link-keep-stored-after-insertion nil)

  ;;; agenda
  ;;;;; Basic agenda setup
  (setq org-default-notes-file (thread-last org-directory (expand-file-name "notes.org")))
  (setq org-agenda-span 'week)
  (setq org-agenda-start-on-weekday 1)  ; Monday
  (setq org-agenda-confirm-kill t)
  (setq org-agenda-show-all-dates t)
  (setq org-agenda-show-outline-path nil)
  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-skip-comment-trees t)
  (setq org-agenda-menu-show-matcher t)
  (setq org-agenda-menu-two-columns nil)
  (setq org-agenda-sticky nil)
  (setq org-agenda-custom-commands-contexts nil)
  (setq org-agenda-max-entries nil)
  (setq org-agenda-max-todos nil)
  (setq org-agenda-max-tags nil)
  (setq org-agenda-max-effort nil)
  (setq org-agenda-files (list (org-file-path "tasks.org")))

  (run-at-time (* 60 5) nil #'org-agenda-to-appt)

  (define-key global-map (kbd "C-c a") 'org-agenda)

  ;; Place tags close to the right-hand side of the window
  (defun place-agenda-tags ()
    "Put the agenda tags by the right border of the agenda window."
    (setq org-agenda-tags-column 110)
    (org-agenda-align-tags))
  (add-hook 'org-finalize-agenda-hook 'place-agenda-tags)

  (setq org-agenda-compact-blocks t)
  (setq org-agenda-block-separator 45)
  (setq org-agenda-sorting-strategy
        '(((agenda habit-down time-up priority-down category-keep)
           (todo priority-down category-keep)
           (tags priority-down category-keep)
           (search category-keep))))
  (setq org-agenda-breadcrumbs-separator "->")
  (setq org-agenda-fontify-priorities 'cookies)
  (setq org-agenda-category-icon-alist nil)
  (setq org-agenda-remove-times-when-in-prefix nil)
  (setq org-agenda-remove-timeranges-from-blocks nil)
  (setq org-agenda-compact-blocks nil)
  (setq org-agenda-block-separator ?—)

  ;;;;; Agenda marks
  (setq org-agenda-bulk-mark-char ">")
  (setq org-agenda-persistent-marks nil)

  ;;;;; Agenda diary entries
  (setq org-agenda-insert-diary-strategy 'date-tree)
  (setq org-agenda-insert-diary-extract-time nil)
  (setq org-agenda-include-diary t) ;; TODO: i'm not so sure about this yet

  ;;;;; Agenda follow mode
  (setq org-agenda-start-with-follow-mode nil)
  (setq org-agenda-follow-indirect t)

  ;;;;; Agenda multi-item tasks
  (setq org-agenda-dim-blocked-tasks t)
  (setq org-agenda-todo-list-sublevels t)

  ;;;;; Agenda filters and restricted views
  (setq org-agenda-persistent-filter nil)
  (setq org-agenda-restriction-lock-highlight-subtree t)

  ;;;;; Agenda items with deadline and scheduled timestamps
  (setq org-agenda-include-deadlines t)
  (setq org-deadline-warning-days 5)
  (setq org-agenda-skip-scheduled-if-done nil)
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  (setq org-agenda-skip-timestamp-if-deadline-is-shown t)
  (setq org-agenda-skip-deadline-if-done nil)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled 1)
  (setq org-agenda-skip-scheduled-delay-if-deadline nil)
  (setq org-agenda-skip-additional-timestamps-same-entry nil)
  (setq org-agenda-skip-timestamp-if-done nil)
  (setq org-agenda-search-headline-for-time nil)
  (setq org-scheduled-past-days 365)
  (setq org-deadline-past-days 365)
  (setq org-agenda-move-date-from-past-immediately-to-today t)
  (setq org-agenda-show-future-repeats t)
  (setq org-agenda-prefer-last-repeat nil)
  (setq org-agenda-timerange-leaders
        '("" "(%d/%d): "))
  (setq org-agenda-scheduled-leaders
        '("Scheduled: " "Sched.%2dx: "))
  (setq org-agenda-inactive-leader "[")
  (setq org-agenda-deadline-leaders
        '("Deadline:  " "In %3d d.: " "%2d d. ago: "))
  ;; Time grid
  (setq org-agenda-time-leading-zero t)
  (setq org-agenda-timegrid-use-ampm nil)
  (setq org-agenda-use-time-grid t)
  (setq org-agenda-show-current-time-in-grid t)
  (setq org-agenda-current-time-string
        (concat "Now " (make-string 70 ?-)))
  (setq org-agenda-time-grid
        '((daily today require-timed)
          (0600 0700 0800 0900 1000 1100
                1200 1300 1400 1500 1600
                1700 1800 1900 2000 2100)
          " ....." "-----------------"))
  (setq org-agenda-default-appointment-duration nil)

  ;;;;; Agenda global to-do list
  (setq org-agenda-todo-ignore-with-date t)
  (setq org-agenda-todo-ignore-timestamp t)
  (setq org-agenda-todo-ignore-scheduled t)
  (setq org-agenda-todo-ignore-deadlines t)
  (setq org-agenda-todo-ignore-time-comparison-use-seconds t)
  (setq org-agenda-tags-todo-honor-ignore-options nil)

  ;;;;; Agenda tagged items
  (setq org-agenda-show-inherited-tags t)
  (setq org-agenda-use-tag-inheritance
        '(todo search agenda))
  (setq org-agenda-hide-tags-regexp nil)
  (setq org-agenda-remove-tags nil)
  (setq org-agenda-tags-column -100)

  ;;;;; Agenda entry
  ;; NOTE: I do not use this right now.  Leaving everything to its
  ;; default value.
  (setq org-agenda-start-with-entry-text-mode nil)
  (setq org-agenda-entry-text-maxlines 5)
  (setq org-agenda-entry-text-exclude-regexps nil)
  (setq org-agenda-entry-text-leaders "    > ")

  ;;;;; Agenda logging and clocking
  ;; NOTE: I do not use these yet, though I plan to.  Leaving everything
  ;; to its default value for the time being.
  (setq org-agenda-log-mode-items '(closed clock))
  (setq org-agenda-clock-consistency-checks
        '((:max-duration "10:00" :min-duration 0 :max-gap "0:05" :gap-ok-around
                         ("4:00")
                         :default-face  ; This should definitely be reviewed
                         ((:background "DarkRed")
                          (:foreground "white"))
                         :overlap-face nil :gap-face nil :no-end-time-face nil
                         :long-face nil :short-face nil)))
  (setq org-agenda-log-mode-add-notes t)
  (setq org-agenda-start-with-log-mode nil)
  (setq org-agenda-start-with-clockreport-mode nil)
  (setq org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2))
  (setq org-agenda-search-view-always-boolean nil)
  (setq org-agenda-search-view-force-full-words nil)
  (setq org-agenda-search-view-max-outline-level 0)
  (setq org-agenda-search-headline-for-time t)
  (setq org-agenda-use-time-grid t)
  (setq org-agenda-cmp-user-defined nil)
  (setq org-agenda-sort-notime-is-late t)   ; Org 9.4
  (setq org-agenda-sort-noeffort-is-high t) ; Org 9.4

  ;;;;; Agenda column view
  ;; NOTE I do not use these, but may need them in the future.
  (setq org-agenda-view-columns-initially nil)
  (setq org-agenda-columns-show-summaries t)
  (setq org-agenda-columns-compute-summary-properties t)
  (setq org-agenda-columns-add-appointments-to-effort-sum nil)
  (setq org-agenda-auto-exclude-function nil)
  (setq org-agenda-bulk-custom-functions nil)

  (setq org-agenda-custom-commands
        `(("a" "What's Going On"
           ,`((tags "*"
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if
                        'notregexp "\\[#[ABCDEFG]\\]"
                        'timestamp))
                     (org-agenda-block-separator nil)
                     (org-agenda-overriding-header "Important tasks without a date\n")))
              (agenda "" ((org-agenda-time-grid nil)
                          (org-agenda-start-on-weekday nil)
                          (org-agenda-span 1)
                          (org-agenda-show-all-dates nil)
                          (org-scheduled-past-days 365)
                          ;; Excludes today's scheduled items
                          (org-scheduled-delay-days 1)
                          (org-agenda-block-separator nil)
                          (org-agenda-entry-types '(:scheduled))
                          (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                          (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                          (org-agenda-format-date "")
                          (org-agenda-overriding-header "\nPending scheduled tasks")))
              (agenda "" ((org-agenda-span 1)
                          (org-deadline-warning-days 0)
                          (org-agenda-block-separator nil)
                          (org-scheduled-past-days 0)
                          ;; We don't need the `org-agenda-date-today'
                          ;; highlight because that only has a practical
                          ;; utility in multi-day views.
                          (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                          (org-agenda-format-date "%A %-e %B %Y")
                          (org-agenda-overriding-header "\nToday's agenda\n")))
              (agenda "" ((org-agenda-start-on-weekday nil)
                          (org-agenda-start-day "+1d")
                          (org-agenda-span 5)
                          (org-deadline-warning-days 0)
                          (org-agenda-block-separator nil)
                          (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                          (org-agenda-overriding-header "\nNext five days\n")))
              (tags "*" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp "\\(\\* Tasks.*\\|\\[#[ABCDEFG]\\]\\|.*TODO.*\\)"))
                         (org-agenda-block-separator nil)
                         (org-agenda-overriding-header "Un-prioritized tasks\n")))))

          ("c" "Tasks completed in past two weeks"
           ,'((agenda "" ((org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'todo 'deadline))
                          (org-agenda-archives-mode t)
                          (org-agenda-span 14)
                          (org-agenda-start-on-weekday -7)
                          (org-agenda-overriding-header "Tasks completed in the past two weeks\n")))))))

  ;; Bind C-c C-x C-s to mark todo as done and archive it
  (defun lp/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it"
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'lp/mark-done-and-archive)

  ;;; capturing
  (define-key global-map (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
        `(("b" "Basic task for future review" entry
           (file+headline "tasks.org" "Tasks to be reviewed")
           ,(concat "* %^{Title}\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n"
                    ":END:\n\n"
                    "%i%l")
           :empty-lines-after 1)
          ("m" "Memorandum of conversation" entry
           (file+headline "tasks.org" "Tasks to be reviewed")
           ,(concat "* Memorandum of conversation with %^{Person}\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n"
                    ":END:\n\n"
                    "%i%?")
           :empty-lines-after 1)
          ("t" "Task with a due date" entry
           (file+headline "tasks.org" "Tasks with a date")
           ,(concat "* TODO %^{Title} %^g\n"
                    "SCHEDULED: %^t\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n"
                    ":END:\n\n"
                    "%i%?")
           :empty-lines-after 1)
          ("e" "Email note" entry
           (file+headline "tasks.org" "Tasks to be reviewed")
           ,(concat "* MAYBE %:subject :mail:\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n"
                    ":END:\n\n"
                    "%a\n%i%?")
           :empty-lines-after 1)))

  ;;; autofill
  ;; Auto wrap paragraphs in some modes (auto-fill-mode)
  (add-hook 'text-mode-hook #'turn-on-auto-fill)
  (add-hook 'org-mode-hook #'turn-on-auto-fill)
  (define-key org-mode-map (kbd "C-c q") 'auto-fill-mode)

  ;;; cdlatex is very useful for math-related editing
  (add-hook 'org-mode-hook #'turn-on-org-cdlatex)

  ;;; making links to other contexts
  (define-key global-map (kbd "C-c l") 'org-store-link))
#+END_SRC

*** org-modern
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'org-modern
  (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
#+end_src
** diary, calendar
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'calendar
  ;; lots ripped from prot
  (setq calendar-mark-diary-entries-flag t)
  (setq calendar-mark-holidays-flag t)
  (setq calendar-mode-line-format nil)
  (setq calendar-time-display-form
        '(24-hours ":" minutes
                   (when time-zone
                     (format "(%s)" time-zone))))
  (setq calendar-week-start-day 1)      ; Monday
  (setq calendar-date-style 'iso)
  (setq calendar-date-display-form calendar-iso-date-display-form)
  (setq calendar-time-zone-style 'numeric) ; Emacs 28.1

  (require 'solar)
  (setq calendar-latitude 39.0         ; Not my actual coordinates
        calendar-longitude -76.4)

  (require 'cal-dst)
  (setq calendar-standard-time-zone-name "EST")
  (setq calendar-daylight-time-zone-name "EDT")

  (require 'diary-lib)
  (setq diary-file (file-truename "~/org/diary"))
  (setq user-mail-address "liamp@TheCave")
  (setq diary-mail-addr user-mail-address)
  (setq diary-date-forms diary-iso-date-forms)
  (setq diary-comment-start ";;")
  (setq diary-comment-end "")
  (setq diary-nonmarking-symbol "!")
  (setq diary-show-holidays-flag t)
  (setq diary-display-function #'diary-fancy-display) ; better than its alternative
  (setq diary-header-line-format nil)
  (setq diary-list-include-blanks nil)
  (setq diary-number-of-entries 3)
  (setq diary-mail-days 3)
  (setq diary-abbreviated-year-flag nil)

  (add-hook 'calendar-today-visible-hook #'calendar-mark-today)
  (add-hook 'diary-list-entries-hook 'diary-sort-entries t)
  (add-hook 'diary-mode-hook #'goto-address-mode) ; buttonise plain text links

  ;; Those presuppose (setq diary-display-function #'diary-fancy-display)
  (add-hook 'diary-list-entries-hook 'diary-include-other-diary-files)
  (add-hook 'diary-mark-entries-hook 'diary-mark-included-diary-files)

  ;; Prevent Org from interfering with my key bindings.
  (remove-hook 'calendar-mode-hook #'org--setup-calendar-bindings)

  (let ((map calendar-mode-map))
    (define-key map (kbd "s") #'calendar-sunrise-sunset)
    (define-key map (kbd "l") #'lunar-phases)
    (define-key map (kbd "i") nil) ; Org sets this, much to my chagrin (see `remove-hook' above)
    (define-key map (kbd "i a") #'diary-insert-anniversary-entry)
    (define-key map (kbd "i b") #'diary-insert-block-entry)
    (define-key map (kbd "i c") #'diary-insert-cyclic-entry)
    (define-key map (kbd "i d") #'diary-insert-entry) ; for current "day"
    (define-key map (kbd "i i") #'diary-insert-entry) ; most common action, easier to type
    (define-key map (kbd "i m") #'diary-insert-monthly-entry)
    (define-key map (kbd "i w") #'diary-insert-weekly-entry)
    (define-key map (kbd "i y") #'diary-insert-yearly-entry)
    (define-key map (kbd "M-n") #'calendar-forward-month)
    (define-key map (kbd "M-p") #'calendar-backward-month)))

(lp-emacs-builtin-package 'appt
  (setq appt-display-diary nil)
  (setq appt-disp-window-function #'appt-disp-window)
  (setq appt-display-mode-line t)
  (setq appt-display-interval 5)
  (setq appt-audible nil)
  (setq appt-warning-time-regexp "appt \\([0-9]+\\)")
  (setq appt-message-warning-time 15)

  (run-at-time 10 nil #'appt-activate 1))

  ;;; modified from prot. while its a great idea, it can be problematic to automatically email from different (work) computers
;; The idea is to get a reminder via email when I launch Emacs in the
;; morning and this file is evaluated.  Obviously this is not a super
;; sophisticated approach, though I do not need one.
;; (let ((time (string-to-number (format-time-string "%H"))))
;;   (when (and (> time 4) (< time 9))
;;     (run-at-time (* 60 5) nil #'diary-mail-entries)))

(require 'holidays)

;; This weirdly needs to come after =org-roam=. otherwise these binds are shadowed by the
;; =org-roam-dailies-map= assignment
(let ((map global-map))
  (define-key map (kbd "C-c d c") #'calendar)
  ;; (define-key map (kbd "C-c d d") #'prot-diary-display-entries)
  ;; (define-key map (kbd "C-c d e") #'prot-diary-edit-diary)
  (define-key map (kbd "C-c d i") #'diary-insert-entry)
  (define-key map (kbd "C-c d m") #'diary-mail-entries))
#+end_src

** bibtex and citation management
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'bibtex)
(lp-emacs-elpa-package 'bibtex-completion
  (setq bibtex-completion-bibliography '(
                                         "~/org/bib/index.bib"
                                         "~/org/bib/archive.bib"
                                         )
        bibtex-completion-library-path '("~/org/bib/pdfs/")
        bibtex-completion-notes-path "~/org/bib/notes/"))

(lp-emacs-git-package
    'consult-bibtex "https://github.com/mohkale/consult-bibtex.git"
    (with-eval-after-load 'embark
      (add-to-list 'embark-keymap-alist '(bibtex-completion . consult-bibtex-embark-map)))
    (setq consult-bibtex-default-action #'consult-bibtex-edit-notes))
#+end_src

*** org-ref :disabled:
#+begin_src emacs-lisp :tangle no
(lp-emacs-elpa-package 'async)
(lp-emacs-elpa-package 'org-ref
  (require 'org-ref-bibtex)
  (require 'doi-utils)
  (require 'org-ref-arxiv)

  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link))
#+end_src
** markdown
A time-tested classic mark-up language. Not much more to say; the customizations are minimal.

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'markdown-mode)
#+end_src
** ~denote~, prot's note-taking package
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'denote
    ;; highly recommneded to make this directory a git repo, or at least a
    ;; `project.el`-recognized project
    (setq denote-directory "~/Dropbox/denotes/")
    (setq denote-allow-multi-word-keywords t)
    (setq denote-known-keywords '("emacs" "school" "food" "programming"
                                  "adult" ;; for adult-related stuff, e.g. finances, passwords, car, loans, etc.
                                  "games" "philosophy" "work" "exercise" "bouldering" "journal"))
    (setq denote-infer-keywords nil)
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    (setq denote-file-type 'text)

    (require 'denote-dired)
    (add-hook 'dired-mode-hook #'denote-dired-mode)

    (require 'denote-link)

    ;; Here is a custom, user-level command from one of the examples we
    ;; showed in this manual.  We define it here and add it to a key binding
    ;; below.
    (defun my-denote-journal ()
      "Create an entry tagged 'journal', while prompting for a
title. With prefix arg 'C-u', prompt the user for additional
keywords from `journal'"
      (interactive)
      (let* ((title (denote--title-prompt))
             (tags-prompt
              (if current-prefix-arg
                  (denote--keywords-prompt)
                nil))
             (tags
              (cond
               ((null tags-prompt) "journal")
               ((listp tags-prompt) (append '("journal") tags-prompt))
               (t (list "journal" tags-prompt)))))
        (denote
         title
         tags)))

    ;; Denote does not define any key bindings.  This is for the user to
    ;; decide.  For example:
    (let ((map global-map))
      (define-key map (kbd "C-c f j") #'my-denote-journal) ; our custom command
      (define-key map (kbd "C-c f n") #'denote)
      (define-key map (kbd "C-c f N") #'denote-type)
      (define-key map (kbd "C-c f d") #'(lambda ()
                                          (interactive)
                                          (dired (denote-directory))))

      (define-key map (kbd "C-c f i") #'denote-link) ; "insert" mnemonic
      (define-key map (kbd "C-c f I") #'denote-link-add-links)
      (define-key map (kbd "C-c f l") #'denote-link-find-file) ; "list" links
      (define-key map (kbd "C-c f b") #'denote-link-backlinks)
      (define-key map (kbd "C-c f r") #'denote-dired-rename-file)))
#+end_src

** ~tmr~, timing and time-keeping in Emacs

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'tmr
  ;; Works on most unix-based systems I think, unsure on Mac
  (setq tmr-sound-file "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga")
  (setq tmr-notification-urgency 'normal)
  (setq tmr-descriptions-list
        (list "Class Readings"
              "Class Homework"
              "Boil Pasta"
              "Work"
              "Break"))

  (let ((map global-map))
    (define-key map (kbd "C-c t t") #'tmr)
    (define-key map (kbd "C-c t d") #'tmr-with-description)
    (define-key map (kbd "C-c t T") #'tmr-clone)
    (define-key map (kbd "C-c t c") #'tmr-cancel)
    (define-key map (kbd "C-c t r") #'tmr-remove-finished)
    (define-key map (kbd "C-c t l") #'tmr-tabulated-view)))
#+end_src

** ~logos~, a simple focus mode for emacs
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'olivetti
  (setq olivetti-body-width 0.7
        olivetti-minimum-body-width 80
        olivetti-recall-visual-line-mode-entry-state t))

(lp-emacs-elpa-package 'logos
  (setq logos-outlines-are-pages t)
  (setq logos-outline-regexp-alist
        `((text-mode .  "") ;; just use the page-break to make things simple
          (org-mode . "^\\*+ +")
          (t . ,(or outline-regexp logos--page-delimiter))))

  (setq-default logos-hide-mode-line t
                logos-hide-buffer-boundaries nil
                logos-hide-fringe t
                logos-variable-pitch nil
                logos-scroll-lock t
                logos-olivetti t)

  (let ((map global-map))
    (define-key map [remap narrow-to-region] #'logos-narrow-dwim)
    (define-key map [remap forward-page] #'logos-forward-page-dwim) ; C-x ]
    (define-key map [remap backward-page] #'logos-backward-page-dwim) ; C-x [
    (define-key map (kbd "M-^") #'logos-focus-mode)
    ))
#+end_src

**

** pdf-tools
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'pdf-tools
  (setq pdf-tools-enabled-modes
        '(pdf-history-minor-mode
          pdf-isearch-minor-mode
          pdf-links-minor-mode
          pdf-outline-minor-mode
          pdf-misc-size-indication-minor-mode
          pdf-occur-global-minor-mode))

  (setq pdf-view-display-size 'fit-width)
  (setq pdf-view-continuous t)
  (setq pdf-view-use-dedicated-register nil)
  (setq pdf-view-max-image-width 2160)
  (setq pdf-outline-imenu-use-flat-menus t)

  (pdf-loader-install)

  (with-eval-after-load 'modus-themes
    ;;; credits to prot as always!
    ;; Those functions and hooks are adapted from the manual of my modus-themes.
    ;; The idea is to (i) add a backdrop that is distinct from the background of
    ;; the PDF's page and (ii) make pdf-tools adapt to theme switching via, e.g.,
    ;; `modus-themes-toggle'.
    (defun prot/pdf-tools-backdrop ()
      (face-remap-add-relative
       'default `(:background
                  ,(modus-themes-color
                    'bg-alt))))

    (defun prot/pdf-tools-midnight-mode-toggle ()
      (when (derived-mode-p 'pdf-view-mode)
        (if (eq (car custom-enabled-themes) 'modus-vivendi)
            (pdf-view-midnight-minor-mode 1)
          (pdf-view-midnight-minor-mode -1))
        (prot/pdf-tools-backdrop)))

    (add-hook 'pdf-tools-enabled-hook #'prot/pdf-tools-midnight-mode-toggle)
    (add-hook 'modus-themes-after-load-theme-hook #'prot/pdf-tools-midnight-mode-toggle)))
#+end_src

** ispell+flyspell
=ispell= and =flyspell= are built-in utilities to interface with externally installed
spelling programs (=hunspell=, =aspell=, =ispell=, etc.). =flyspell= is much like
=flymake= where, on the fly, misspelled words are highlighted as you type them or move
over them. Words not passed or typed will not be checked unless explicitly invoked by
=flyspell-buffer=. =ispell= provides functionality for checking and correcting spelling
on-command.

=ispell= provides some fairly sophisticated, but simple, capabilities when correcting a
word. After invoking =ispell= (=M-$=), a buffer pops up which details what corrections are
known by the external spelling program for the word at point. A user can choose a
correction (digit), skip (=<SPC>=), replace word-at-point with a new word (=r NEW <RET>=),
replace all occurrences of the word at point (=R NEW <RET>=), accept the incorrect word
(=a=), insert this word into a private dictionary file (=i=, =m=), and a couple of other
actions specified in the manual.

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'ispell
  (setq ispell-dictionary "english")
  (setq ispell-silently-savep t))

(lp-emacs-builtin-package 'flyspell
  ;; :diminish flyspell-mode
  (dolist (mode-hook '(org-mode-hook markdown-mode-hook))
    (add-hook mode-hook #'flyspell-mode))
  (setq flyspell-issue-message-flag nil)
  (setq flyspell-issue-welcome-flag nil)
  (define-key flyspell-mode-map (kbd "C-;") nil) ;; gets in the way of things.
  (define-key flyspell-mode-map (kbd "C-M-i") nil) ;; gets in the way of things.
  )
#+end_src

* programming languages and environments
** programming mode
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'prog-mode
  ;; Mark TODOs , FIXME, BUG as red in src code
  (add-hook 'prog-mode-hook
            (lambda ()
              (font-lock-add-keywords
               nil
               '(("\\<\\(FIXME\\|TODO\\|BUG\\)" 1 font-lock-warning-face prepend))))))

(lp-emacs-builtin-package 'compile
  (setq compilation-ask-about-save nil)
  (setq compilation-scroll-output 'next-error)
  (setq compilation-skip-threshold 2)
  (setq compilation-scroll-output 'first-error)
  (setq compilation-always-kill t)
  (setq compilation-auto-jump-to-first-error t)
  )
#+end_src
** lsp lol
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'lsp-mode
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-auto-guess-root nil)
  (setq lsp-prefer-flymake t)
  (setq lsp-enable-file-watchers nil)
  (setq lsp-enable-folding t) ; needed for lsp-jlia...
  (setq lsp-keep-workspace-alive nil)
  (setq lsp-eldoc-hook '(lsp-hover))

  (setq lsp-file-watch-threshold 1500)  ; pyright has more than 1000


  (define-key lsp-mode-map (kbd "C-c y a") #'lsp-execute-code-action)

  (setq read-process-output-max (* 1024 1024))
  (setq base-lsp-mode-hooks
        '(typescript-mode-hook tuargeg-mode-hook))
  (dolist (hook base-lsp-mode-hooks)
    (add-hook hook #'lsp)))

(lp-emacs-elpa-package 'lsp-ui
  ;; sideline visualization of idagonstics, actions, hover info
  (setq lsp-ui-sideline-show-diagnostics nil)
  (setq lsp-ui-sideline-show-code-actions nil)
  (setq lsp-ui-sideline-show-hover nil)
  (setq lsp-ui-sideline-delay 1)

  ;; documentation display
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-include-signature t)
  (setq lsp-ui-doc-enhanced-mardown t)
  (setq lsp-ui-doc-show-with-cursor t)
  (setq lsp-ui-doc-use-webkit nil)
  (setq lsp-ui-doc-delay 1)

  (define-key lsp-ui-mode-map (kbd "C-c y d") 'lsp-ui-doc-show)
  (define-key lsp-ui-mode-map (kbd "C-c y C-d") 'lsp-ui-doc-hide)
  (define-key lsp-ui-mode-map (kbd "C-c y i") 'lsp-ui-imenu)
  (define-key lsp-ui-mode-map (kbd "C-c y r") 'lsp-format-region)
  (define-key lsp-ui-mode-map (kbd "C-c y b") 'lsp-format-buffer)
  (define-key lsp-ui-mode-map (kbd "C-c n") 'lsp-format-buffer))

;; ;; LSPJavaPac
(lp-emacs-elpa-package 'lsp-java
  ;;(executable-find "mvn")
  (setq lsp-java-server-install-dir (expand-file-name "~/.emacs.d/share/eclipse.jdt.ls/"))
  (setq lsp-java-workspace-dir (expand-file-name "~/.emacs.d/share/eclipse.jdt.ls/workspace/"))
  (setq lsp-java-configuration-maven-user-settings (expand-file-name "~/.m2/settings.xml"))
  (setq lsp-java-configuration-runtimes '[(:name "JavaSE-1.8"
                                                 :path "/home/kyoncho/jdk1.8.0_201.jdk/")
                                          (:name "JavaSE-11"
                                                 :path "/Library/Java/JavaVirtualMachines/temurin-11.jdk/Contents/Home/"
                                                 :default t)])
  ;; (setq lsp-java-java-path "")...
  (add-hook 'java-mode-hook #'lsp)
  (define-key lsp-mode-map (kbd "C-c y t") #'lsp-java-type-hierarchy)
  )
;; ;; -LSPJavaPac

(lp-emacs-elpa-package 'lsp-julia
  (setq lsp-julia-default-environment "~/.julia/environments/v1.7")
  (add-hook 'julia-mode-hook #'lsp))


(lp-emacs-elpa-package 'lsp-jedi
  (add-hook 'python-mode-hook #'lsp))
#+end_src

** eglot
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'eglot
  (defvar eglot-prog-mode-hooks '(cc-mode-hook c-mode-hook c++-mode-hook cuda-mode-hook
                                               rjsx-mode-hook
                                               ))
  (dolist (mode eglot-prog-mode-hooks)
    (add-hook mode 'eglot-ensure))

  (define-key eglot-mode-map (kbd "C-c y n") #'eglot-rename)
  (define-key eglot-mode-map (kbd "C-c y o") #'eglot-reconnect)
  (define-key eglot-mode-map (kbd "C-c y a") #'eglot-code-actions)
  (define-key eglot-mode-map (kbd "C-c y b") #'eglot-format-buffer)
  (define-key eglot-mode-map (kbd "C-c y h") #'eldoc)
  (define-key eglot-mode-map (kbd "C-c y d") #'xref-find-definitions)
  )

;; (lp-emacs-elpa-package 'eglot-java
;;   (eglot-java-init)
;;   (setcdr (assq 'java-mode eglot-server-programs) '("/Users/packell1/.emacs.d/share/eclipse.jdt.ls/bin/jdtls"))
;;   (add-hook 'java-mode-hook #'eglot-ensure)
;;   )

;; 4 julia
;; (lp-emacs-elpa-package 'eglot-jl
;;   (setq lsp-julia-package-dir nil)
;;   (setq eglot-jl-language-server-project "~/.julia/environments/v1.7")
;;   (setq eglot-connect-timeout 5000)

;;   (setq julia-repl-switches "-p NCORES")

;;   (eglot-jl-init)
;;   )
;; for the crashes https://github.com/non-Jedi/eglot-jl/issues/30

(lp-emacs-elpa-package 'consult-eglot
  (define-key eglot-mode-map [remap xref-find-apropos] #'consult-eglot-symbols))
#+end_src
** flymake and its extras

=flymake= is a package that provides on-the-fly "make"-esque errors to the user. Similar to
=flyspell= in spirit.

Writing prose is tough and proselint is a nice tool. To install, run =sudo apt install
python3-proselint=

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'flymake
  (setq flymake-fringe-indicator-position 'left-fringe)
  (setq flymake-suppress-zero-counters t)
  (setq flymake-start-on-flymake-mode t)
  (setq flymake-no-changes-timeout nil)
  (setq flymake-start-on-save-buffer t)
  (setq flymake-proc-compilation-prevents-syntax-check t)
  (setq flymake-wrap-around nil)
  (setq flymake-mode-line-format
        '("" flymake-mode-line-exception flymake-mode-line-counters))
  (setq flymake-mode-line-counter-format
        '(" " flymake-mode-line-error-counter
          flymake-mode-line-warning-counter
          flymake-mode-line-note-counter ""))

  (add-hook 'prog-mode-hook 'flymake-mode)

  (let ((map flymake-mode-map))
    (define-key map (kbd "C-c y s") #'flymake-start)
    (define-key map (kbd "C-c y d") #'flymake-show-buffer-diagnostics) ; Emacs28
    (define-key map (kbd "C-c y n") #'flymake-goto-next-error)
    (define-key map (kbd "C-c y p") #'flymake-goto-prev-error)))
#+END_SRC

*** flymake extras (diagnostic, shellcheck, proselint)

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'flymake-diagnostic-at-point
  (setq flymake-diagnostic-at-point-display-diagnostic-function
        'flymake-diagnostic-at-point-display-minibuffer))

  ;;; Flymake + Shellcheck
(lp-emacs-elpa-package 'flymake-shellcheck
  (add-hook 'sh-mode-hook 'flymake-shellcheck-load))


  ;;; Flymake + Proselint
(lp-emacs-elpa-package 'flymake-proselint
  (add-hook 'markdown-mode-hook #'flymake-proselint-setup)
  (add-hook 'org-mode-hook #'flymake-proselint-setup)
  (add-hook 'text-mode-hook #'flymake-proselint-setup))

(lp-emacs-elpa-package 'flymake-python-pyflakes
  (add-hook 'python-mode-hook 'flymake-python-pyflakes-load))
#+end_src
** ocaml
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'tuareg)

(lp-emacs-elpa-package 'utop
  (setq utop-command "opam config exec -- utop -emacs")
  ;; (setq utop-command "opam config exec -- dune utop . -- -emacs")

  (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
  (add-hook 'tuareg-mode-hook 'utop-minor-mode))
(lp-emacs-elpa-package 'dune)
#+end_src
** python
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'python
  (setq python-indent-offset 4)
  (setq python-shell-interpreter "python"
        ;; python-shell-interpreter-args "console --simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
  )

(lp-emacs-elpa-package 'pyvenv)
(lp-emacs-elpa-package 'conda
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell)
  (setq

   conda-anaconda-home "/Users/packell1/miniconda3/"
   conda-env-home-directory (expand-file-name "~/miniconda3/") ;; as in previous example; not required
   conda-env-subdirectory "envs")
  )
#+end_src

** julia
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'julia-mode)

(lp-emacs-elpa-package 'vterm)

(lp-emacs-elpa-package 'julia-snail
  (add-hook 'julia-mode-hook 'julia-snail-mode))
#+end_src

** java
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'cc-mode
  (add-hook 'java-mode-hook
            #'(lambda ()
                (interactive)
                (setq-local indent-tabs-mode nil
                            tab-width 2))))
#+end_src

** c{,++} environment
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'cc-mode
  :config
  (setq gdb-many-windows 't)
  (setq tab-width 2)
  (setq c-basic-offset 4)
  (setq-default indent-tabs-mode nil)

  (define-key c-mode-map (kbd "C-j") 'c-indent-new-comment-line)
  (define-key c++-mode-map (kbd "C-j") 'c-indent-new-comment-line)
  (add-hook 'c++-mode-hook
            #'(lambda ()
                (setq compile-command "cmake .. -DCMAKE_EXRORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Debug; cmake --build . -j8")))
  )

(lp-emacs-builtin-package 'gud
  (setq gud-nav-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "g b") 'gud-break)
          (define-key map (kbd "g <") 'gud-up)
          (define-key map (kbd "g >") 'gud-down)
          (define-key map (kbd "g n") 'gud-next)
          (define-key map (kbd "g s") 'gud-step)
          (define-key map (kbd "g c") 'gud-cont)
          (define-key map (kbd "g p") 'gud-print)
          (define-key map (kbd "g d") 'gud-remove)
          (define-key map (kbd "g l") 'gud-refresh)
          (define-key map (kbd "g e") 'gud-statement)
          map))
  (define-key c-mode-map (kbd "C-c g") gud-nav-map)
  (define-key c++-mode-map (kbd "C-c g") gud-nav-map))
#+end_src
** cmake
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'cmake-mode)

(lp-emacs-elpa-package 'eldoc-cmake
  (add-hook 'cmake-mode-hook 'eldoc-cmake-enable))
#+end_src
** (common) lisp, scheme, and racket
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'paredit
  (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
  (add-hook 'lisp-mode-hook #'paredit-mode)
  (add-hook 'scheme-mode-hook #'paredit-mode)
  (add-hook 'sly-mode-hook #'paredit-mode)
  (add-hook 'racket-mode-hook #'paredit-mode))

(lp-emacs-elpa-package 'sly
  (setq inferior-lisp-program "/usr/bin/sbcl"))

(lp-emacs-elpa-package 'sly-asdf)

(lp-emacs-elpa-package 'sly-quicklisp)

;; eldoc provides minibuffer hints for elisp things. it's super nice
(lp-emacs-elpa-package 'eldoc
  (global-eldoc-mode 1))

(lp-emacs-elpa-package 'rainbow-delimiters
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

;; since chez has no docs implemented for geiser, i'd rather just generate tags and use
;; xref-etags-mode to do most of the heavy lifting...
(lp-emacs-elpa-package 'geiser
  (add-hook 'geiser-mode-hook #'paredit-mode))

(lp-emacs-elpa-package 'geiser-chez)
(lp-emacs-elpa-package 'racket-mode
  (add-hook 'racket-mode-hook #'racket-xp-mode)
  (lp-emacs-elpa-package 'flymake-racket
    (flymake-racket-setup)))
#+end_src
** symbolic math (maxima, calc)

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'calc)
(lp-emacs-elpa-package 'maxima
  (add-hook 'maxima-mode-hook #'maxima-hook-function)
  (add-hook 'maxima-inferior-mode-hook #'maxima-hook-function)
  (setq maxima-display-maxima-buffer t)
  )
#+end_src

** docker

Docker is just too prevalent not to be ready for it. =docker-tramp= is an incredibly useful
package providing an easy-to-use interface to use =tramp= in connecting to running docker
containers. The syntax follows the usual tramp style: =/docker:{image_name, image_tag}:= and
you're in (i think. as long as the =ssh= port is exposed? i have no clue its magic and i'm
not gonna worry about it for now).

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'dockerfile-mode)

(lp-emacs-elpa-package 'docker-tramp)
#+end_src

* unix environment interface
** project management
Instead of using =projectile=, there's now a wonderful built-in library, =project=, which
has lots of overlap with =projectile=. Might as well remove a dependency.
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'project
  (define-key global-map (kbd "C-x p a") 'ff-find-other-file))
#+end_src
** magit
#+begin_src emacs-lisp
  ;;; Magit
;; God bless magit and all that it does
(lp-emacs-elpa-package 'magit
  (setq
   ;; don't put "origin-" in front of new branch names by default
   magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
   magit-push-always-verify t)
  (define-key global-map (kbd "C-x g") 'magit-status))
#+END_SRC

** vc
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'vc
  (setq vc-handled-backends '(SVN Git))
    ;;;  As always, from Prot. Directly copied. No shame. See https://protesilaos.com/emacs/dotemacs#h:31deeff4-dfae-48d9-a906-1f3272f29bc9

  ;; Those offer various types of functionality, such as blaming,
  ;; viewing logs, showing a dedicated buffer with changes to affected
  ;; files.
  (require 'vc-annotate)
  (require 'vc-dir)
  (require 'vc-git)
  (require 'add-log)
  (require 'log-view)

  ;; This one is for editing commit messages.
  (require 'log-edit)
  (setq log-edit-confirm 'changed)
  (setq log-edit-keep-buffer nil)
  (setq log-edit-require-final-newline t)
  (setq log-edit-setup-add-author nil)

  ;; Note that `prot-vc-git-setup-mode' will run the following when
  ;; activated:
  ;;
  ;;   (remove-hook 'log-edit-hook #'log-edit-show-files)
  ;;
  ;; If you need the window to pop back up, do it manually with C-c C-f
  ;; which calls `log-edit-show-files'.

  (setq vc-find-revision-no-save t)
  (setq vc-annotate-display-mode 'scale) ; scale to oldest
  ;; I use a different account for git commits
  ;; (setq add-log-mailing-address "info@protesilaos.com")
  (setq add-log-keep-changes-together t)
  (setq vc-git-diff-switches '("--patch-with-stat" "--histogram"))
  (setq vc-git-print-log-follow t)
  (setq vc-git-revision-complete-only-branches nil) ; Emacs 28
  (setq vc-git-root-log-format
        '("%d %h %ad %an: %s"
          ;; The first shy group matches the characters drawn by --graph.
          ;; We use numbered groups because `log-view-message-re' wants the
          ;; revision number to be group 1.
          "^\\(?:[*/\\|]+\\)\\(?:[*/\\| ]+\\)?\
  \\(?2: ([^)]+) \\)?\\(?1:[0-9a-z]+\\) \
  \\(?4:[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}\\) \
  \\(?3:.*?\\):"
          ((1 'log-view-message)
           (2 'change-log-list nil lax)
           (3 'change-log-name)
           (4 'change-log-date))))

  (add-hook 'log-view-mode-hook #'hl-line-mode)

  ;; NOTE: I override lots of the defaults
  (let ((map global-map))
    (define-key map (kbd "C-x v b") #'vc-retrieve-tag)  ; "branch" switch
    (define-key map (kbd "C-x v t") #'vc-create-tag)
    (define-key map (kbd "C-x v f") #'vc-log-incoming)  ; the actual git fetch
    (define-key map (kbd "C-x v o") #'vc-log-outgoing)
    (define-key map (kbd "C-x v F") #'vc-update)        ; "F" because "P" is push
    (define-key map (kbd "C-x v d") #'vc-diff))
  (let ((map vc-dir-mode-map))
    (define-key map (kbd "b") #'vc-retrieve-tag)
    (define-key map (kbd "t") #'vc-create-tag)
    (define-key map (kbd "O") #'vc-log-outgoing)
    (define-key map (kbd "o") #'vc-dir-find-file-other-window)
    (define-key map (kbd "f") #'vc-log-incoming) ; replaces `vc-dir-find-file' (use RET)
    (define-key map (kbd "F") #'vc-update)       ; symmetric with P: `vc-push'
    (define-key map (kbd "d") #'vc-diff)         ; parallel to D: `vc-root-diff'
    (define-key map (kbd "k") #'vc-dir-clean-files)
    (define-key map (kbd "G") #'vc-revert)
    (let ((prot-vc-git-branch-map (make-sparse-keymap)))
      (define-key map "B" prot-vc-git-branch-map)
      (define-key prot-vc-git-branch-map "n" #'vc-create-tag) ; new branch/tag
      (define-key prot-vc-git-branch-map "s" #'vc-retrieve-tag) ; switch branch/tag
      ;; (define-key prot-vc-git-branch-map "c" #'prot-vc-git-checkout-remote)
                                        ; "checkout" remote
      (define-key prot-vc-git-branch-map "l" #'vc-print-branch-log))
    (let ((prot-vc-git-stash-map (make-sparse-keymap)))
      (define-key map "S" prot-vc-git-stash-map)
      (define-key prot-vc-git-stash-map "c" 'vc-git-stash) ; "create" named stash
      (define-key prot-vc-git-stash-map "s" 'vc-git-stash-snapshot)))
  (let ((map vc-git-stash-shared-map))
    (define-key map "a" 'vc-git-stash-apply-at-point)
    (define-key map "c" 'vc-git-stash) ; "create" named stash
    (define-key map "D" 'vc-git-stash-delete-at-point)
    (define-key map "p" 'vc-git-stash-pop-at-point)
    (define-key map "s" 'vc-git-stash-snapshot))
  (let ((map vc-annotate-mode-map))
    (define-key map (kbd "M-q") #'vc-annotate-toggle-annotation-visibility)
    (define-key map (kbd "C-c C-c") #'vc-annotate-goto-line)
    (define-key map (kbd "<return>") #'vc-annotate-find-revision-at-line))
  (let ((map log-view-mode-map))
    (define-key map (kbd "<tab>") #'log-view-toggle-entry-display)
    (define-key map (kbd "<return>") #'log-view-find-revision)
    (define-key map (kbd "s") #'vc-log-search)
    (define-key map (kbd "o") #'vc-log-outgoing)
    (define-key map (kbd "f") #'vc-log-incoming)
    (define-key map (kbd "F") #'vc-update)
    (define-key map (kbd "P") #'vc-push))


  )
#+end_src
** shell
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'shell
  (setq shell-command-prompt-show-cwd t) ; Emacs 27.1
  (setq ansi-color-for-comint-mode t))
#+end_src
** eshell

Slowly using eshell more, especially given its smooth interop with =tramp= as well as its
intermingle of features between bash, csh, and zsh.

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'eshell
  (require 'esh-mode)
  (require 'esh-module)
  (setq eshell-modules-list             ; It works but may need review
        '(eshell-alias                  ; aliases
          eshell-basic
          eshell-cmpl                   ; tab completion
          eshell-dirs                   ; view the ring with `cd =`
          eshell-glob ; unix-style globbing (with recursive (**), not (~), {zero,one}-or-more (#, ##), ...)
          eshell-hist ; unix-style history (!ls, !?ls, ...)
          eshell-ls   ; ls
          eshell-pred ; zsh-like argument predication (see its man page or zsh examples)
          eshell-prompt       ; prompt navigation
          eshell-script       ; running `eshell` script files (source, ./, ...)
          eshell-term         ; for visual programs (vi, vim, top, ...)
          eshell-tramp        ; u kno
          eshell-unix))       ; standard unix commands
  (setenv "PAGER" "cat")      ; solves issues, such as with 'git log' and the default 'less'
  (require 'em-cmpl)
  (require 'em-dirs)
  (setq eshell-cd-on-directory t)

  (require 'em-tramp)
  (setq password-cache t)
  (setq password-cache-expiry 600)

  (require 'em-hist)
  (setq eshell-hist-ignoredups t)
  (setq eshell-save-history-on-exit t)

  (setq eshell-buffer-shorthand t
        eshell-destroy-buffer-when-process-dies t)
  (global-set-key (kbd "<f1>") 'eshell))
#+end_src
** proced

A =top=-like interface for emacs.

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'proced
  (setq proced-auto-update-flag t)
  (setq proced-auto-update-interval 2)
  (setq proced-descend t)
  (setq prcoed-filter 'user))
#+end_src

** dired

starting from prot's configuration since he always RTFMs. There's a lot of configuration
that I haven't dug my teeth into yet. I like the setup below.

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'dired
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode 1)))

  ;; disable ls by default
  (setq delete-by-moving-to-trash t)
  (setq insert-directory-program "ls"
        dired-use-ls-dired t)
  (setq dired-listing-switches
        "-AGFhlv --group-directories-first --time-style=long-iso")
  (setq dired-dwim-target t)
  (setq dired-auto-revert-buffer #'dired-directory-changed-p) ; also see `dired-do-revert-buffer'
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'hl-line-mode))

(lp-emacs-builtin-package 'dired-aux
  (setq dired-isearch-filenames 'dwim)
  ;; The following variables were introduced in Emacs 27.1
  (setq dired-create-destination-dirs 'ask)
  (setq dired-vc-rename-file t)
  ;; And this is for Emacs 28
  (setq dired-do-revert-buffer (lambda (dir) (not (file-remote-p dir))))

  (let ((map dired-mode-map))
    (define-key map (kbd "C-+") #'dired-create-empty-file)
    (define-key map (kbd "M-s f") #'nil)
    (define-key map (kbd "C-x v v") #'dired-vc-next-action))
  )
(lp-emacs-builtin-package 'dired-x
  (setq dired-clean-up-buffers-too t)
  (setq dired-clean-confirm-killing-deleted-buffers t)
  (setq dired-x-hands-off-my-keys t)    ; easier to show the keys I use
  (setq dired-bind-man nil)
  (setq dired-bind-info nil)
  (define-key dired-mode-map (kbd "I") #'dired-info))
#+end_src
** recentf

Access recent files, where recents exclude the annoying =.git=, =.elpa=, etc. files.

=wgrep= allows editing =grep=-style buffer for batched editing, much like =wdired=.

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'recentf                    ; Save recently visited files
  ;; :diminish recentf-mode
  (recentf-mode)
  (setq
   recentf-max-saved-items 200
   recentf-max-menu-items 15
   ;; Cleanup recent files only when Emacs is idle, but not when the mode
   ;; is enabled, because that unnecessarily slows down Emacs. My Emacs
   ;; idles often enough to have the recent files list clean up regularly
   recentf-auto-cleanup 300
   recentf-exclude (list "/\\.git/.*\\'"     ; Git contents
                         "/elpa/.*\\'"       ; Package files
                         "/itsalltext/"      ; It's all text temp files
                         ;; And all other kinds of boring files
                         )))
#+END_SRC

** wgrep
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'wgrep
  (define-key grep-mode-map (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode))
#+end_src
** ediff
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'ediff
  ;; :diminish ediff-mode
  (setq ediff-diff-options "-w"))
#+end_src
** exec path from shell
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'exec-path-from-shell
  (setq exec-path-from-shell-variables '("PATH" "JAVA_HOME"))
  (exec-path-from-shell-initialize))
#+end_src

** Transparent Remote (file) Access, Multiple Protocol (TRAMP)

The manual walks through a number of examples that demonstrate the hidden processes that
TRAMP does so the user doesn't have to. The most sensible methods that I use are =ssh=
(unix based) and =smb= (windows, samba).

There's a couple of typical uses that are nice to have written down (more examples in [[info:tramp#File name
syntax][tramp#File name syntax]]):
- =/-::= -- Use the default TRAMP method and connect to the local host with the current
  username
- =/ssh:domain:= -- Use the =ssh= method to connect to domain name =domain=. =domain= can be
  an an IPv4, an IPv6, or a resolvable domain name address.
- =/ssh:username@domain:= -- connect to =domain= with the user =username=. This will
  prompt a login sequence if no token or key is already registered.
- =/ssh:username@domain|sudo::/path/to/file= connect to =domain= with username =username=,
  to then tunnel into a =localhost= connection for =sudo=.
- =/ssh:username@domain#port:= -- Connect to =domain= for user =username= on the port
  =port=. This can be especially useful if tunneling occurs on specific open ports
  (usually something like =:22= but could be different). Equivalent to =ssh -p PORT=.

There is a distinction between =inline= and =external= methods. The inline methods include
the ubiquitous =ssh=. External methods include =scp=, =rsync=, =ftp=, =smb= and so
forth. Details on =smb= can be checked in [[info:tramp#External methods][the manual]]. =inline= methods should be used
first since they generally work well with small files. =external= methods can be used
after finding =internal= methods insufficient.

To avoid repeated authentication, native caching mechanisms can be used and are generally
prompted for in the natural TRAMP usage. Another package =auth-source.el= reads passwords
from different sources stored in the default authentication file =~/.authinfo{,.gpg}= (but
can be changed through the variable =auth-sources=). See [[info:auth#Help for users][auth#Help for users]] for more
information on the format of this file and the details that =auth-source= goes through to
access it.

The usual very capable built-in packages interop well with tramp: =shell.el=, =eshell.el=,
=compile.el= (commands like =compile= and =grep=) and =gud.el= (=gdb= or =perldb=). The
most typical problem with these packages will be the problem with the remote =PATH= found
by tramp (configurable through =tramp-remote-path=). This can help find programs in, say
=~/.local/bin/, ~/bin=.

=DISPLAY= can be problematic. [[info:tramp#Remote processes][tramp#Remote processes]] has some details. The upshot is that
the =tramp-remote-process-environment= needs to have the variable =DISPLAY=(getenv
"DISPLAY")= set (if X11 is configured properly on the hosting shell). You can also specify
=ForwardX11 yes= or =ForwardX11Trusted yes= in =~/.ssh/config=.

External =shell-command= usages use the remote host's file path system (not the
=/ssh:host:...= system specified by tramp). =shell-command= will infer the host on which
it is being used so that the relative file path is always "correct", given that you know
the machine you're on.

=eshell= has very tight interop with TRAMP. You can simply run =cd /sudo::/etc= to enter
the local =/etc= directory in =sudo= mode. Any TRAMP file specification can be used to
seamlessly remote in the eshell session.

Running =gdb= through =gud.el= can be done, but as opposed to =shell-command= the TRAMP
naming system must be used: =gdb -i=mi /ssh:host:~/program <RET>=. I/O will be restricted
since =gdb= and =gdb-inferior= will not belong to the same process group on the remote
host. Relative file paths are possible as well, but when in doubt the full path should be
the go-to.

#+begin_src emacs-lisp
(lp-emacs-builtin-package 'tramp
    ;;; I'm actually going to give scp a try as the default method for now. There might be benefits due to the encryption overhead required of ssh in =external= use cases.

  ;; ssh > scp (the default).
  ;; (setq tramp-default-method "ssh")
  ;; (setq tramp-default-user "packell1")

  (setq tramp-verbose 3) ;; can go up to 11! 3 is the default.
  (add-to-list 'tramp-remote-process-environment
               (format "DISPLAY=localhost:10"))
  )
#+end_src
* external environment interface
** notmuch                                            -- mail in emacs
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'notmuch
  (setq notmuch-show-logo nil)
  (setq notmuch-column-control t)
  (setq notmuch-hello-auto-refresh t)
  (setq notmuch-hello-recent-searches-max 20)
  (setq notmuch-hello-thousands-separator "")
  ;; ;; See my variant of it in `prot-notmuch' below.
  (setq notmuch-hello-sections '(notmuch-hello-insert-saved-searches))
  (setq notmuch-show-all-tags-list t)

  (setq notmuch-search-oldest-first nil)

  (setq notmuch-search-line-faces
        '(("unread" . notmuch-search-unread-face)
          ("flag" . notmuch-search-flagged-face)))
  (setq notmuch-show-empty-saved-searches t)

  (setq notmuch-saved-searches
        `(( :name "all"
            :query "not tag:archived and not tag:list and not tag:lists and not tag:spam"
            :sort-order newest-first
            :key ,(kbd "a"))
          ( :name "inbox"
            :query "tag:inbox not tag:archived"
            :sort-order newest-first
            :key ,(kbd "i"))
          ( :name "unread (inbox)"
            :query "tag:unread and tag:inbox"
            :sort-order newest-first
            :key ,(kbd "u"))
          ( :name "unread all"
            :query "tag:unread and not tag:archived and not tag:list and not tag:lists"
            :sort-order newest-first
            :key ,(kbd "U"))
          ( :name "personal"
            :query "tag:personal not tag:archived"
            :sort-order newest-first
            :key ,(kbd "p"))
          ( :name "personal all"
            :query "tag:personal"
            :sort-order newest-first
            :key ,(kbd "P"))
          ( :name "todo"
            :query "tag:todo not tag:archived"
            :sort-order newest-first
            :key ,(kbd "t"))
          ( :name "todo all"
            :query "tag:todo"
            :sort-order newest-first
            :key ,(kbd "T"))
          ( :name "done"
            :query "tag:done"
            :sort-order newest-first
            :key ,(kbd "d"))
          ( :name "flagged"
            :query "tag:flag or tag:flagged or tag:important or tag:starred"
            :sort-order newest-first
            :key ,(kbd "f"))
          ( :name "mailing lists"
            :query "tag:list or tag:lists not tag:archived"
            :key ,(kbd "m"))
          ))

  (setq notmuch-archive-tags '("-inbox" "+archived"))
  (setq notmuch-message-replied-tags '("+replied"))
  (setq notmuch-message-forwarded-tags '("+forwarded"))
  (setq notmuch-show-mark-read-tags '("-unread"))
  (setq notmuch-draft-tags '("+draft"))
  (setq notmuch-draft-folder "drafts")
  (setq notmuch-draft-save-plaintext 'ask)

  ;; ;; NOTE 2021-06-18: See an updated version in the `prot-notmuch'
  ;; ;; section below.
  (setq notmuch-tagging-keys
        `((,(kbd "a") notmuch-archive-tags "Archive (remove from inbox)")
          (,(kbd "c") ("+archived" "-inbox" "-list" "-todo" "-ref" "-unread" "+done") "Complete and archive")
          (,(kbd "d") ("+del" "-inbox" "-archived" "-unread") "Mark for deletion")
          (,(kbd "f") ("+flag" "-unread") "Flag as important")
          ;; (,(kbd "r") notmuch-show-mark-read-tags "Mark as read")
          (,(kbd "r") ("+ref" "+notes" "-unread") "Reference for the future")
          (,(kbd "s") ("+spam" "+del" "-inbox" "-unread") "Mark as spam")
          (,(kbd "t") ("+todo" "-unread") "To-do")
          (,(kbd "u") ("+unread") "Mark as unread")))

  (setq notmuch-tag-formats
        '(("unread" (propertize tag 'face 'notmuch-tag-unread))
          ("flag" (propertize tag 'face 'notmuch-tag-flagged))))
  (setq notmuch-tag-deleted-formats
        '(("unread" (notmuch-apply-face bare-tag `notmuch-tag-deleted))
          (".*" (notmuch-apply-face tag `notmuch-tag-deleted))))

  ;;; Email composition
  (setq notmuch-mua-compose-in 'current-window)
  (setq notmuch-mua-hidden-headers nil) ; TODO 2021-05-12: Review hidden headers
  (setq notmuch-address-command nil)    ; FIXME 2021-05-13: Make it work with EBDB
  (setq notmuch-always-prompt-for-sender t)
  (setq notmuch-mua-cite-function 'message-cite-original-without-signature)
  (setq notmuch-mua-reply-insert-header-p-function 'notmuch-show-reply-insert-header-p-never)
  (setq notmuch-mua-user-agent-function #'notmuch-mua-user-agent-full)
  (setq notmuch-maildir-use-notmuch-insert t)
  (setq notmuch-crypto-process-mime t)
  (setq notmuch-crypto-get-keys-asynchronously t)
  (setq notmuch-mua-attachment-regexp   ; see `notmuch-mua-send-hook'
        (concat "\\b\\(attache\?ment\\|attached\\|attach\\)"
                "\\b"))

  ;;; Reading messages
  (setq notmuch-show-relative-dates t)
  (setq notmuch-show-all-multipart/alternative-parts nil)
  (setq notmuch-show-indent-messages-width 0)
  (setq notmuch-show-indent-multipart nil)
  (setq notmuch-show-part-button-default-action 'notmuch-show-save-part)
  (setq notmuch-show-text/html-blocked-images ".") ; block everything
  (setq notmuch-wash-citation-lines-prefix 6)
  (setq notmuch-wash-citation-lines-suffix 6)
  (setq notmuch-wash-wrap-lines-length 100)
  (setq notmuch-unthreaded-show-out nil)
  (setq notmuch-message-headers '("To" "Cc" "Subject" "Date"))
  (setq notmuch-message-headers-visible t)

  ;;; Hooks and key bindings
  (add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)
  (remove-hook 'notmuch-show-hook #'notmuch-show-turn-on-visual-line-mode)
  (add-hook 'notmuch-show-hook (lambda () (setq-local header-line-format nil)))

  ;; Use alternating backgrounds, if `stripes' is available.
  (with-eval-after-load 'stripes
    (add-hook 'notmuch-search-hook #'stripes-mode)
    ;; ;; To disable `hl-line-mode':
    ;; (setq notmuch-search-hook nil)
    ;; (add-hook 'notmuch-search-hook #'prot-common-disable-hl-line)
    )

  (let ((map global-map))
    (define-key map (kbd "C-c m") #'notmuch)
    (define-key map (kbd "C-x m") #'notmuch-mua-new-mail)) ; override `compose-mail'
  (define-key notmuch-search-mode-map (kbd "/") #'notmuch-search-filter) ; alias for l
  (define-key notmuch-hello-mode-map (kbd "C-<tab>") nil)
  )


  ;;; Sending email (SMTP)
(lp-emacs-builtin-package 'smtpmail
  (setq smtpmail-stream-type 'ssl)
  (setq smtpmail-smtp-service 465)
  (setq smtpmail-queue-mail nil)
  ;; (setq smtpmail-smtp-server "smtp.gmail.com")
  ;; (setq smtpmail-auth-credentials '(("smtp.gmail.com" 465 "liampacker@gmail.com" "acydhqtbgeudyvxm")))
  (setq smtpmail-debug-info t)
  (setq smtpmail-debug-verb t)
  )

(lp-emacs-builtin-package 'sendmail
  (setq send-mail-function 'smtpmail-send-it))
#+END_SRC

** eww                                                -- web browsing
#+begin_src emacs-lisp
(lp-emacs-builtin-package 'eww
  (define-key global-map (kbd "<f12>") 'eww)
  (define-key global-map (kbd "M-(") 'eww)
  (setq shr-use-colors nil)             ; t is bad for accessibility
  (setq shr-use-fonts nil)              ; t is not for me
  (setq shr-max-image-proportion 0.6)
  (setq shr-image-animate nil)          ; No GIFs, thank you!
  (setq shr-width nil)                  ; check `prot-eww-readable'
  (setq shr-discard-aria-hidden t)
  (setq shr-cookie-policy nil)

  (setq eww-search-prefix "https://www.duckduckgo.com/?q=")

  (setq browse-url-browser-function 'eww-browse-url)
  (setq browse-url-secondary-browser-function 'browse-url-default-browser)
  (setq eww-restore-desktop t)
  (setq eww-desktop-remove-duplicates t)
  (setq eww-header-line-format nil)
  (setq eww-download-directory (expand-file-name "~/Documents/eww-downloads"))
  (setq eww-suggest-uris
        '(eww-links-at-point
          thing-at-point-url-at-point))
  (setq eww-bookmarks-directory (locate-user-emacs-file "eww-bookmarks/"))
  (setq eww-history-limit 150)
  (setq eww-browse-url-new-window-is-tab nil)
  (setq eww-form-checkbox-selected-symbol "[X]")
  (setq eww-form-checkbox-symbol "[ ]")
  (setq eww-retrieve-command nil)

  (define-key eww-link-keymap (kbd "v") nil) ; stop overriding `eww-view-source'
  (define-key eww-mode-map (kbd "L") #'eww-list-bookmarks)
  (define-key dired-mode-map (kbd "E") #'eww-open-file) ; to render local HTML files
  (define-key eww-buffers-mode-map (kbd "d") #'eww-bookmark-kill)   ; it actually deletes
  (define-key eww-bookmark-mode-map (kbd "d") #'eww-bookmark-kill) ; same
  )
#+end_src
** elfeed                                             -- RSS feed reader

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'elfeed
  (define-key global-map (kbd "C-c e") #'elfeed)

  (setq elfeed-use-curl t)
  (setq elfeed-curl-max-connections 10)
  (setq elfeed-db-directory (concat user-emacs-directory "elfeed/"))
  (setq elfeed-enclosure-default-dir "~/Downloads/")
  (setq elfeed-search-filter "@4-months-ago +unread")
  (setq elfeed-sort-order 'descending)
  (setq elfeed-search-clipboard-type 'CLIPBOARD)
  (setq elfeed-search-title-max-width 110)
  (setq elfeed-search-title-min-width 30)
  (setq elfeed-search-trailing-width 25)
  (setq elfeed-show-truncate-long-urls t)
  (setq elfeed-show-unique-buffers t)
  (setq elfeed-search-date-format '("%F %R" 16 :left))

  (let ((map elfeed-search-mode-map))
    (define-key map (kbd "w") #'elfeed-search-yank)
    (define-key map (kbd "g") #'elfeed-update)
    (define-key map (kbd "G") #'elfeed-search-update--force)) ; "hop" mnemonic
  (let ((map elfeed-show-mode-map))
    (define-key map (kbd "w") #'elfeed-show-yank))
  ;; Make sure to also check the section on shr and eww for how I handle
  ;; `shr-width' there.
  (add-hook 'elfeed-show-mode-hook
            (lambda () (setq-local shr-width (max 80 (current-fill-column)))))

  ;; This is set in two places now, once in =eww= and once here.
  (setq browse-url-browser-function 'eww-browse-url)
  (setq browse-url-secondary-browser-function 'browse-url-default-browser)
  (setq elfeed-feeds '(("https://freddiedeboer.substack.com/feed.rss" leftist) ;; marxist i think
                       ("https://www.juliabloggers.com/feed/" julia ) ;; julia blogs
                       ("https://protesilaos.com/master.xml" leftist philosphy emacs)
                       ("https://hnrss.org/newest?points=100" hacker-news tech)
                       "https://dynomight.net/feed.xml"
                       ("https://computer.rip/rss.xml" tech) ;; "computers are bad
                       ("http://rachelbythebay.com/w/2021/11/06/sql/" tech)
                       ("https://matt.might.net/articles/feed.rss" tech academia pl)
                       ("https://www.nayuki.io/rss20.xml" hacker)
                       ("https://ava.substack.com/feed" writing help-self)
                       ("https://askmolly.substack.com/feed" writing help-self)
                       ("https://askpolly.substack.com/feed" writing help-self)
                       ("https://cherylstrayed.substack.com/feed" writing help-self)
                       ("https://griefbacon.substack.com/feed" writing)
                       ("https://leandramcohen.substack.com/feed" fashion)
                       ("https://defaultfriend.substack.com/feed" writing)
                       ("https://jdahl.substack.com/feed" writing)
                       ("http://feeds.feedburner.com/FineArtAndYou" art)
                       ("http://inconvergent.net/atom.xml" infrequent)
                       ("http://nullprogram.com/feed/" infrequent)
                       ("http://feeds.feedburner.com/datacolada/" infrequent)
                       ("https://terrytao.wordpress.com/feed/" math)
                       ("http://xkcd.com/rss.xml" comic)
                       ("http://feeds.feedburner.com/RoguelikeRadio" infrequent)
                       ("http://cppcast.libsyn.com/rss" cpp)
                       ("http://planet.emacsen.org/atom.xml" lisp) ;; emacs
                       ("https://planet.lisp.org/rss20.xml" lisp) ;; lisp
                       ("https://tymoon.eu/api/reader/atom" lisp) ;; lisp, gamedev
                       ("https://40ants.com/lisp-project-of-the-day/rss.xml" lisp) ;; lisp project of the day
                       ("https://ambrevar.xyz/atom.xml" lisp) ;; lisper, maker of nyxt browser
                       ("https://alhassy.github.io/rss.xml" lisp) ;; lisper, had that great post about emacs lisp's type system
                       ("https://www.reddit.com/r/dailyprogrammer/.rss" daily)
                       ("http://understandinguncertainty.org/blog" infrequent)
                       ("http://timharford.com/feed/" econ)
                       ("https://www.bennee.com/~alex/blog/feeds/all.atom.xml" infrequent)
                       ("https://sive.rs/podcast.rss" infrequent)
                       ("https://lacker.io/feed.xml" ai tech)
                       ("https://graymirror.substack.com/feed" leftist))))
#+end_src
** nov                                                -- epub reader

#+begin_src emacs-lisp
(lp-emacs-elpa-package 'nov
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

  (setq nov-text-width nil)
  (add-hook 'nov-mode-hook 'visual-line-mode)

  (defun my-nov-font-setup ()
    (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                             :height 1.0))

  (add-hook 'nov-mode-hook 'my-nov-font-setup))
#+end_src

** bongo                                              -- music player
#+begin_src emacs-lisp
(lp-emacs-elpa-package 'bongo
  (setq bongo-default-directory "/home/liamp/Desktop/musics/")
  (setq bongo-display-inline-playback-progress t)
  (setq bongo-prefer-library-buffers nil)
  (setq bongo-insert-whole-directory-trees t)
  (setq bongo-logo nil)
  (setq bongo-display-track-icons nil)
  (setq bongo-display-track-lengths nil)
  (setq bongo-display-header-icons nil)
  (setq bongo-display-playback-mode-indicator t)
  (setq bongo-display-inline-playback-progress nil) ; t slows down the playlist buffer
  (setq bongo-join-inserted-tracks nil)
  (setq bongo-field-separator (propertize " · " 'face 'shadow))
  (setq bongo-mark-played-tracks t)
  ;; (setq bongo-vlc-program-name "cvlc")
  (bongo-mode-line-indicator-mode -1)
  (bongo-header-line-mode -1)
  (let ((map global-map))
    (define-key map (kbd "C-c b") #'bongo)
    (define-key map (kbd "<C-XF86AudioPlay>") #'bongo-pause/resume)
    (define-key map (kbd "<C-XF86AudioNext>") #'bongo-next)
    (define-key map (kbd "<C-XF86AudioPrev>") #'bongo-previous)
    (define-key map (kbd "<C-M-XF86AudioPlay>") #'bongo-play-random)
    (define-key map (kbd "<M-XF86AudioPlay>") #'bongo-show)
    (define-key map (kbd "<S-XF86AudioNext>") #'bongo-seek-forward-10)
    (define-key map (kbd "<S-XF86AudioPrev>") #'bongo-seek-backward-10)
    ;; Same as above for the pgtk build of Emacs 29.  Only tested it
    ;; with SwayWM.  GNOME 42 may have its own bindings for the
    ;; multimedia keys that require changes at the level of the desktop
    ;; environment.
    (define-key map (kbd "C-<AudioPlay>") #'bongo-pause/resume)
    (define-key map (kbd "C-<AudioNext>") #'bongo-next)
    (define-key map (kbd "C-<AudioPrev>") #'bongo-previous)
    (define-key map (kbd "C-M-<AudioPlay>") #'bongo-play-random)
    (define-key map (kbd "M-<AudioPlay>") #'bongo-show)
    (define-key map (kbd "S-<AudioNext>") #'bongo-seek-forward-10)
    (define-key map (kbd "S-<AudioPrev>") #'bongo-seek-backward-10))
  (let ((map bongo-playlist-mode-map))
    (define-key map (kbd "n") #'bongo-next-object)
    (define-key map (kbd "p") #'bongo-previous-object)
    (define-key map (kbd "R") #'bongo-rename-line)
    (define-key map (kbd "j") #'bongo-dired-line)       ; Jump to dir of file at point
    (define-key map (kbd "J") #'dired-jump)             ; Jump to library buffer
    (define-key map (kbd "I") #'bongo-insert-special)))

#+end_src

* hyper experimental, toxic zone ⚠
In the below, I'm testing things out. No commentary, no thoughts, no brain on how i feel
about them is detailed. that's for the main packages. this is the hyper-safe toxic-waste
testing zone

** ~lp-journal~ for simple, low-cost journaling                     :noexport:
#+begin_src emacs-lisp :tangle no
(require 'lp-scratch)
(setq lp--journal-dir (file-truename "~/org/roam/daily/"))
(define-key global-map (kbd "C-c f j j") 'lp-journal-visit-today)
(define-key global-map (kbd "C-c f j n") 'lp-journal-visit-forward-one-day)
(define-key global-map (kbd "C-c f j p") 'lp-journal-visit-backward-one-day)
#+end_src
** ~lp-notes~ for simple, low-cost notes management :noexport:
#+begin_src emacs-lisp :tangle n
(require 'lp-scratch)
(setq lp--notes-dir (file-truename "~/org/roam/"))
(define-key global-map (kbd "C-c f d") 'lp-notes-dired)
(define-key global-map (kbd "C-c f f") 'lp-notes-find-file)
(define-key global-map (kbd "C-c f n") 'lp-notes-make-file)
#+end_src


* configurations and people i took inspiration from
- Skeeto's configuration, https://github.com/skeeto/.emacs.d. This is
  the first configuration which I tried to modify for my own means back
  when I first started to take courses in CS at college. It's where it
  all began, and I intend to look back to see where he's traveled with
  it sometime soon.
- Prot, of course. [[potesilaos.com/emacs/dotemacs]]. So much of the little
  things he picks up on in the manuals and specifications is incredibly
  useful in day-to-day use. That's not even mentioning his incredibly
  informative youtube videos and insightful posts on his website, both
  emacs-related or otherwise. His communication of the "software-freedom
  philosophy" is best-in-class and inspired me to sit down, minimize,
  and really understand my tools. In this way, I am free from the
  standards and specifications of those who wish to indoctrinate me into
  a state of reliance on their sub-par and opaque products.
- Howardisms is an OG.
- Sacha Chua
- TODO: I'm sure there's a lot more ...
