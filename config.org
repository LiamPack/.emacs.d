#+TITLE: emacs config
- [X] get rest of init.el in here
- [X] clean up TODO-ed headings
- [X] finish constructing rest of init
- [ ] gather general-purpose keybindings into single location
- [ ] Evaluate Tree-Sitter instead of font-lock for syntax highlighting
- [ ] clean up latex
- [ ] clean up org
- [ ] update org-roam to v2
- [ ] think harder about notmuch tags
- start hitting some real customization: get familiar with how frames are made,
  how visualization is done, how attributes are structured for font groups, how
  to generate editing functions/macros procedural, ...

* sane defaults
#+begin_src emacs-lisp
;; minimizes GC interferecen with user activity
(use-package gcmh
  :straight t
  :diminish gcmh-mode
  :init
  (setq gcmh-idle-delay 0.5
        gcmh-high-cons-threshold (* 16 1024 1024))
  (gcmh-mode 1))

;; quicktramp setup
(setq tramp-default-method "ssh")
(defun clean-up-buffer-or-region ()
  "Untabifies, indents and deletes trailing whitespace from buffer or region."
  (interactive)
  (save-excursion
    (unless (region-active-p)
      (mark-whole-buffer))
    (untabify (region-beginning) (region-end))
    (indent-region (region-beginning) (region-end))
    (save-restriction
      (narrow-to-region (region-beginning) (region-end)) (delete-trailing-whitespace))))

(global-set-key (kbd "C-x k") #'(lambda () (interactive) (kill-buffer nil)))
(global-set-key (kbd "C-x C-k") #'(lambda () (interactive) (kill-buffer nil) (delete-window)))
(global-set-key (kbd "C-c C-k") #'eval-buffer)
(global-set-key (kbd "C-c n") #'clean-up-buffer-or-region)
(global-set-key (kbd "<f5>")  #'revert-buffer)
(global-set-key (kbd "C-;") #'comment-or-uncomment-region)

(use-package focus-autosave-mode        ; Save buffers when focus is lost
  :straight t
  :init (focus-autosave-mode)
  :diminish focus-autosave-mode)

;; prevent emacs-provided org from being loaded
(straight-register-package 'org)
(straight-register-package 'org-contrib)

;; basics and better default
;; from https://pastebin.com/MDagsZD7
(use-package emacs
  :init
  ;; i fat-finger way too much to not have the confirmation
  (setq confirm-kill-emacs #'yes-or-no-p)
  (global-hl-line-mode t) ; highlight current line
  (winner-mode t)     ; move between windows configuration
  (setq-default fill-column 80)   ; column length
  (column-number-mode t)  ; show column number in the mode line

  ;; name on top of window
  (setq-default frame-title-format '("%b [%m]"))

  (setq warning-minimum-level :error)        ;avoid warning buffer

  ;; scroll
  (setq auto-window-vscroll nil)        ;avoid next-line to trigger line-move-partial
  (setq scroll-conservatively 10)
  (setq scroll-margin 7)
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (when (fboundp 'set-horizontal-scroll-bar-mode)
    (set-horizontal-scroll-bar-mode nil))

  (setq mouse-wheel-scroll-amount '(3 ((shift) . 1) ((control) . nil)))
  (setq mouse-wheel-follow-mouse 't)
  (setq scroll-step 1)

  ;; other basiscs
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-screen t)

  ;; create backups in separate folder
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq create-lockfiles nil)       ; files with # problem with onedrive...

  ;; answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  (if (display-graphic-p)
      (blink-cursor-mode 1)
    (progn
      (blink-cursor-mode -1)
      (setq visible-cursor nil)))

  (setq-default
   initial-scratch-message ";; Present Day
"
   visible-bell t
   create-lockfiles nil
   custom-safe-themes)

  (show-paren-mode t)
  (setq show-paren-style 'parenthesis)
  ;; do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  (setq set-mark-command-repeat-pop t)
  (setq-default
   indent-tabs-mode nil      ; don't insert tab when indent
   ;; this is giving me problems when creating new lines in org-mode source blocks
   help-window-select t     ; focus on help window when openend
   window-combination-resize t)
  (define-key global-map (kbd "C-<tab>") 'next-window-any-frame)
  (define-key global-map (kbd "<backtab>") 'previous-window-any-frame)
  (define-key global-map (kbd "C-c w") 'enlarge-window-horizontally)
  (define-key global-map (kbd "C-x C-M-e") 'pp-macroexpand-last-sexp)
  (define-key global-map (kbd "C-x C-e") 'eval-defun)
  (define-key global-map (kbd "C-x e") 'eval-last-sexp)
  (define-key global-map (kbd "C-h j") 'describe-keymap)
  ) ; resize windows proportionaly
#+end_src

#+RESULTS:

* aesthetics
** themes i like:
General aesthetic configurations for emacs

#+begin_verse
  espresso ; cyberpunk ; moe-light ;
 * good themes
 ** base16
     * zenburn
     * unikitty light
     * solarized light
     * rebecca
     * porple
     * phd
     * ocean
     * nord
     * monokai
     * mocha
     * mellow-purple
     * material + material palenight
     * harmonic-{light,dark}
     * cupertino
     * cupcake
     * sulphurpool-light
     * heath-light
     * cave-light
     * classic-{dark,light}
  * avk-daylight

 * actual good themes
   * leuven / parchment (https://github.com/ajgrf/parchment)
   * porple
   * doom-tomorrow-night
     * Any of the doom ones really
   * Habamax Theme - a little plain
   * Also hydanatantantatna-theme
   * gruvbox
   * tsdh-light
   * tron theme https://github.com/ianpan870102/Emacs-Tron-Legacy-Theme
   * Naysayer-theme https://github.com/nickav/naysayer-theme.el
   * That one black theme i'm using right now (6/15/19)
#+end_verse

** modus themes, time on mode line
#+begin_src emacs-lisp
(use-package modus-themes
  :straight t
  :init
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-mixed-fonts t
        modus-themes-no-mixed-fonts nil
        modus-themes-subtle-line-numbers t
        modus-themes-success-deuteranopia nil

        modus-themes-fringes 'subtle ; {nil,'subtle,'intense}

        ;; Options for `modus-themes-lang-checkers' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `straight-underline', `text-also', `background',
        ;; `intense'
        modus-themes-lang-checkers '(straight-underline)

        ;; Options for `modus-themes-mode-line' are either nil, or a list
        ;; that can combine any of `3d' OR `moody', `borderless',
        ;; `accented'.  The variable's doc string shows all possible
        ;; combinations.
        modus-themes-mode-line '(accented)

        ;; Options for `modus-themes-syntax' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `faint', `yellow-comments', `green-strings', `alt-syntax'
        modus-themes-syntax '(yellow-comments green-strings)

        ;; Options for `modus-themes-hl-line' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `accented', `underline', `intense'
        modus-themes-hl-line '(accented underline)

        ;; Options for `modus-themes-paren-match' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `bold', `intense', `underline'
        modus-themes-paren-match '(bold underline)

        ;; Options for `modus-themes-links' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
        ;; `bold', `italic', `background'
        modus-themes-links '(neutral-underline background)

        ;; Options for `modus-themes-prompts' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `background', `bold', `gray', `intense', `italic'
        modus-themes-prompts '(background italic)

        modus-themes-completions 'opinionated ; {nil,'moderate,'opinionated}

        modus-themes-mail-citations nil ; {nil,'faint,'monochrome}

        ;; Options for `modus-themes-region' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `no-extend', `bg-only', `accented'
        modus-themes-region '(no-extend bg-only accented)

        ;; Options for `modus-themes-diffs': nil, 'desaturated,
        ;; 'bg-only, 'deuteranopia, 'fg-only-deuteranopia
        modus-themes-diffs 'fg-only-deuteranopia

        modus-themes-org-blocks nil ; {nil,'gray-background,'tinted-background}

        modus-themes-org-agenda ; this is an alist: read the manual or its doc string
        nil
        ;; '((header-block . (variable-pitch scale-title))
        ;;   (header-date . (grayscale workaholic bold-today))
        ;;   (scheduled . uniform)
        ;;   (habit . traffic-light-deuteranopia))

        modus-themes-headings ; this is an alist: read the manual or its doc string
        nil
        ;; '((1 . (overline background))
        ;;   (2 . (rainbow overline))
        ;;   (t . (no-bold)))

        modus-themes-variable-pitch-ui nil
        ))

(load-theme 'modus-vivendi)

(use-package time                       ; Show current time
  :straight t
  :config
  (setq display-time-world-time-format "%H:%M %Z, %d. %b"
        display-time-world-list '(("Europe/Berlin"    "Berlin")
                                  ("Europe/London"    "London")
                                  ("Europe/Istanbul"  "Istanbul")
                                  ("America/Winnipeg" "Winnipeg (CA)")
                                  ("America/New_York" "New York (USA)")
                                  ("Asia/Tokyo"       "Tokyo (JP)")))
  (setf display-time-default-load-average nil
        display-time-use-mail-icon t
        display-time-24hr-format t)
  (display-time-mode))
#+end_src

* outline
#+begin_src emacs-lisp
(use-package outline
  :straight (:type built-in)
  :diminish outline-minor-mode
  :hook
  (prog-mode . outline-minor-mode)
  (markdown-mode . outline-minor-mode)
  (conf-mode . outline-minor-mode)
  (LaTeX-mode . outline-minor-mode)
  :config
  (setq outline-minor-mode-cycle t
        outline-minor-mode-highlight 'append))
#+end_src
* movement and editing
** [experimenting] meow (modular editing, not evil)
- need to configure which modes this should be activated int
- some keybindings are jank
- i kinda like it

#+begin_src emacs-lisp
(use-package meow
  :straight (:type git :host github :repo "meow-edit/meow")
  :config
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     ;;     '("q" . meow-quit)
     ;;     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . mode-line-other-buffer)
     '("/" . isearch-forward)
     '("?" . isearch-backward)
     '("$" . move-end-of-line)
     '("0" . move-beginning-of-line)
     ))

  (meow-setup)

  (add-to-list 'meow-mode-state-list
               '((magit . motion)
                 (dired . motion)
                 (sly-mrepl-mode . normal)))
  ;; (setq meow-char-thing-table
  ;;       '((?\( . round)
  ;;         (?\[ . square)
  ;;         (?{ . curly)
  ;;         (?\ . string)
  ;;         (?s . symbol)
  ;;         (?w . window)
  ;;         (?b . buffer)
  ;;         (?p . paragraph)
  ;;         (?l . line)
  ;;         (?d . defun)
  ;;         (?i . indent)
  ;;         (?e . extend)))

  (meow-global-mode 1)
  )
#+end_src

** cursor related (zop, expand-region, undo, iedit)
#+begin_src emacs-lisp
(use-package undo-propose
  :straight t
  :config
  (setq undo-propose-pop-to-buffer t))

(use-package iedit
  :straight t)
#+end_src
** isearch and replace (getting there, clean up)
#+begin_src emacs-lisp
(use-package isearch
  :diminish
  :config
  (setq search-highlight t)
  (setq search-whitespace-regexp ".*?")
  (setq isearch-lax-whitespace t)
  (setq isearch-regexp-lax-whitespace nil)
  (setq isearch-lazy-highlight t)
  ;; All of the following variables were introduced in Emacs 27.1.
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format nil)
  (setq lazy-count-suffix-format " (%s/%s)")
  (setq isearch-yank-on-move 'shift)
  (setq isearch-allow-scroll 'unlimited)
  (define-key minibuffer-local-isearch-map (kbd "M-/") #'isearch-complete-edit)
  (let ((map isearch-mode-map))
    (define-key map (kbd "C-g") #'isearch-cancel) ; instead of `isearch-abort'
    (define-key map (kbd "M-/") #'isearch-complete)))

(use-package replace
  :config
  (setq list-matching-lines-jump-to-current-line t)
  :hook ((occur-mode-hook . hl-line-mode)
         (occur-mode-hook . (lambda ()
                              (toggle-truncate-lines t))))
  :bind (("M-s M-o" . multi-occur)
         :map occur-mode-map
         ("t" . toggle-truncate-lines)))

#+end_src

*** anzu
#+begin_src emacs-lisp
(use-package anzu                       ; Position/matches count for isearch
  :straight t
  :diminish anzu-mode
  :bind
  (([remap query-replace] . anzu-query-replace)
   ([remap query-replace-regexp] . anzu-query-replace-regexp)
   :map isearch-mode-map
   ([remap isearch-query-replace] . anzu-isearch-query-replace)
   ([remap isearch-query-replace-regexp] . anzu-isearch-query-replace-regexp))
  :config
  (global-anzu-mode)
  (setq anzu-cons-mode-line-p nil)
  (set-face-attribute 'anzu-mode-line nil
                      :foreground "yellow" :weight 'bold)
  (custom-set-variables
   '(anzu-mode-lighter "")
   '(nvm-deactivate-region t)
   '(anzu-search-threshold 1000)
   '(anzu-replace-threshold 50)
   '(anzu-replace-to-string-separator " => ")))
#+end_src
** window management utilities (getting there)

#+begin_src emacs-lisp
(set-frame-font "deja vu sans mono 12")

;; I almost always want to switch to a window when I split. So lets do that.
(defun lp/split-window-below-and-switch ()
  "Split window horizontally, then switch to that new window"
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))

(defun lp/split-window-right-and-switch ()
  "Split the window vertically, then switch to the new pane."
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))

(global-set-key (kbd "C-x 2") 'lp/split-window-below-and-switch)
(global-set-key (kbd "C-x 3") 'lp/split-window-right-and-switch)

;; ace-window stuff
;; You can also start by calling ace-window and then decide to switch the action to delete or swap etc. By default the bindings are:
;;     x - delete window
;;     m - swap windows
;;     M - move window
;;     j - select buffer
;;     n - select the previous window
;;     u - select buffer in the other window
;;     c - split window fairly, either vertically or horizontally
;;     v - split window vertically
;;     b - split window horizontally
;;     o - maximize current window
;;     ? - show these command bindings
(use-package ace-window
  :straight t
  :bind ("M-o" . ace-window)
  :config
  (setq  aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

(use-package ibuffer                    ; Better buffer list
  :straight t
  :bind (([remap list-buffers] . ibuffer))
  :config
  (unbind-key (kbd "C-x C-b") global-map)
  (global-set-key (kbd "C-x B") #'ibuffer))

(use-package ibuffer-vc                 ; Group buffers by VC project and status
  :straight t
  :defer t
  :init (add-hook 'ibuffer-hook
                  (lambda ()
                    (ibuffer-vc-set-filter-groups-by-vc-root)
                    (unless (eq ibuffer-sorting-mode 'alphabetic)
                      (ibuffer-do-sort-by-alphabetic)))))

(use-package ibuffer-projectile         ; Group buffers by Projectile project
  :straight t
  :defer t
  :init (add-hook 'ibuffer-hook #'ibuffer-projectile-set-filter-groups))

(use-package desktop
  :disabled
  :config
  (setq desktop-auto-save-timeout 300)
  (setq desktop-path '("~/.emacs.d/"))
  (setq desktop-base-file-name "desktop")
  (setq desktop-files-not-to-save "\\(.*magit.*\\)")
  (setq desktop-modes-not-to-save '(magit-mode magit-status-mode help-mode))
  (setq desktop-globals-to-clear nil)
  (setq desktop-load-locked-desktop t)
  (setq desktop-missing-file-warning nil)
  (setq desktop-restore-eager 20)
  (setq desktop-restore-frames t)
  (setq desktop-save 'ask-if-new)
  (desktop-save-mode 1))

(use-package tab-bar
  :init
  (setq tab-bar-close-button-show nil)
  (setq tab-bar-close-last-tab-choice 'tab-bar-mode-disable)
  (setq tab-bar-close-tab-select 'recent)
  (setq tab-bar-new-tab-choice t)
  (setq tab-bar-new-tab-to 'right)
  (setq tab-bar-position nil)
  (setq tab-bar-show nil)
  (setq tab-bar-tab-hints nil)
  (setq tab-bar-tab-name-function 'tab-bar-tab-name-all)

  (setq tab-nav-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "b") 'switch-to-buffer-other-tab)
          (define-key map (kbd "d") 'dired-other-tab)
          (define-key map (kbd "f") 'find-file-other-tab)
          (define-key map (kbd "n") 'tab-next)
          (define-key map (kbd "p") 'tab-previous)
          (define-key map (kbd "0") 'tab-close)
          (define-key map (kbd "1") 'tab-close-other)
          (define-key map (kbd "2") 'tab-bar-new-tab)
          (define-key map (kbd "l") 'tab-list)
          map))
  :config
  (tab-bar-mode -1)
  (tab-bar-history-mode -1)
  :bind (("<prior>" . tab-next)
         ("<next>" . tab-previous)))

;; Thank you prot (see
;; https://protesilaos.com/dotemacs/#h:c110e399-3f43-4555-8427-b1afe44c0779)
(use-package window
  :init
  (let ((map global-map))
    (define-key map (kbd "C-x _") #'balance-windows)      ; underscore
    (define-key map (kbd "C-x -") #'fit-window-to-buffer) ; hyphen
    (define-key map (kbd "C-x +") #'balance-windows-area)
    (define-key map (kbd "s-q") #'window-toggle-side-windows)
    (define-key map (kbd "C-x }") #'enlarge-window)
    (define-key map (kbd "C-x {") #'shrink-window)
    (define-key map (kbd "C-x >") #'enlarge-window-horizontally) ; override `scroll-right'
    (define-key map (kbd "C-x <") #'shrink-window-horizontally); override `scroll-left'
    (define-key map (kbd "C-x +") #'balance-windows-area)
    (define-key map (kbd "C-M-q") #'window-toggle-side-windows))
  :hook ((help-mode-hook . visual-line-mode)
         (custom-mode-hook . visual-line-mode)))
#+end_src

** beacon
#+begin_src emacs-lisp
(use-package beacon
  :straight t
  :defer 1
  :diminish beacon-mode
  :config
  (setq beacon-blink-delay 0)
  (setq beacon-size 40)
  (setq beacon-blink-when-focused t)
  (setq beacon-blink-duration .3)
  (setq beacon-blink-when-window-scrolls nil)
  (beacon-mode 1))
#+end_src
* reading and writing
** org
#+begin_src emacs-lisp
(use-package org
  ;; TODO: fix this with the right straight source
  :straight (:type built-in)
  :bind (("\C-cl" . org-store-link))
  :config
  (require 'org-habit)

  ;; Some latex stuff in org
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
  ;; (setq-default org-highlight-latex-and-related '(latex script entities))
  ;; (setq org-latex-listings 'minted)

  ;; Some nice latex pretty-entites!
  (setq org-startup-folded 'fold)
  (setq org-pretty-entities t)
  (setq org-pretty-entities-include-sub-superscripts nil)

  ;; NOTE: If this isn't working, make sure to delete /
  ;; byte-recompile the /elpa/org/.. directory!
  ;; enable language compiles
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (gnuplot . t)))

  (setq org-confirm-babel-evaluate nil)
  (setq org-M-RET-may-split-line nil)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 0)
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)

  ;; Org-capture management + Tasks
  (setq org-directory "~/org/")

  (defun org-file-path (filename)
    "Return absolute address of an org file give its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-refile-targets '((all-org-files :maxlevel . 3)))

  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps t)

  ;; allow creating new parents on refile
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  ;; Place tags close to the right-hand side of the window
  (defun place-agenda-tags ()
    "Put the agenda tags by the right border of the agenda window."
    (setq org-agenda-tags-column (- 4 (window-width)))
    (org-agenda-align-tags))
  (add-hook 'org-finalize-agenda-hook 'place-agenda-tags)



                                        ; agenda stuff
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; (setq org-agenda-dim-blocked-tasks nil)
  ;; (setq org-agenda-compact-blocks t)
  ;; (setq org-agenda-block-separator 45)
  ;; Check out NOX for stuff
  (require 'calendar)

  (setq-default org-agenda-span 'week)
  ;; Custom agenda command definitions
  (setq org-tags-match-list-sublevels t)

  ;; Bind C-c C-x C-s to mark todo as done and archive it
  (defun lp/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it"
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'lp/mark-done-and-archive)
  (setq org-log-done 'time)   ; also record when the TODO was archived

  ;; Useful keybinds
  (setq org-agenda-files (list (org-file-path "inbox.org")))
  (define-key global-map (kbd "C-c a") 'org-agenda)
  (define-key global-map (kbd "C-c c") 'org-capture)
  (setq org-inbox-directory org-directory)
  (setq org-capture-templates
        `(("i" "inbox" entry (file (org-file-path "inbox.org"))
           "* TODO %^{Task} %^g\n%t\n %?")
          ("h" "habit" entry (file (org-file-path  "inbox.org"))
           "* %^{Habit} %^g\n %?")))

  ;; Auto wrap paragraphs in some modes (auto-fill-mode)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)

  ;; sometimes i don't want to wrap text though, so we will toggle
  ;; with C-c q
  (define-key org-mode-map (kbd "C-c q") 'auto-fill-mode)

  (setq org-hide-emphasis-markers nil))

(use-package org-roam
  :straight (:type git :host github
                   :repo "org-roam/org-roam-v1" :branch "master")
  :diminish
  :custom
  (org-roam-directory (file-truename "~/org/roam/"))
  (org-roam-graph-exclude-matcher '("physics" "textbook" "quote" "paper" "private" "daily" "index" "Index"))
  (org-roam-dailies-directory "daily/")
  (org-roam-db-update-idle-seconds 20)
  :init
  (add-hook 'after-init-hook 'org-roam-mode)
  :config
  (define-key org-roam-dailies-map (kbd "l") 'org-roam-dailies-find-today)
  (define-key org-roam-dailies-map (kbd "j") 'org-roam-dailies-find-tomorrow)
  (define-key org-roam-dailies-map (kbd "d") 'org-roam-dailies-find-date)
  (define-key org-roam-dailies-map (kbd "k") 'org-roam-dailies-find-yesterday)
  (define-key org-roam-dailies-map (kbd "p") 'org-roam-dailies-find-previous-note)
  (define-key org-roam-dailies-map (kbd "n") 'org-roam-dailies-find-next-note)

  (setq roam-nav-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "f") 'org-roam-find-file)
          (define-key map (kbd "c") 'org-roam-capture)
          (define-key map (kbd "i") 'org-roam-insert)
          (define-key map (kbd "r") 'org-roam)
          (define-key map (kbd "I") 'org-roam-insert-immediate)
          (define-key map (kbd "g") 'org-roam-graph)
          (define-key map (kbd "o") 'org-roam-jump-to-index)
          (define-key map (kbd "d") 'deft)
          (define-key map (kbd "t") 'org-roam-tag-add)
          map))
  (global-set-key (kbd "C-c C-u") roam-nav-map)
  (require 'org-protocol)
  :bind (("\C-c i" . org-roam-insert-immediate)
         ("\C-c j" . org-roam-dailies-find-today)
         ("\C-c o" . org-roam-jump-to-index)
         ("\C-c t" . org-roam-tag-add)
         ("\C-c f" . org-roam-find-file)
         ("\C-c d" . org-roam-dailies-map)))

(use-package org-roam-server
  :straight t
  :config
  (setq org-roam-server-host "localhost"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))

(use-package deft
  :straight t
  :bind ("<f7>" . deft)
  :custom
  (deft-directory "~/org/roam")
  (deft-recursive t)
  (deft-file-limit 30)
  (deft-current-sort-method 'title))
#+end_src
** latex

#+begin_src emacs-lisp
(use-package org-ref
  :straight t
  :config
  (use-package async
    :straight t)
  (require 'async)
  (require 'org-ref-bibtex)
  (require 'doi-utils)
  (require 'org-ref-arxiv)

  (setq bibtex-autokey-year-length 4
        bibtex-autokey-name-year-separator "-"
        bibtex-autokey-year-title-separator "-"
        bibtex-autokey-titleword-separator "-"
        bibtex-autokey-titlewords 2
        bibtex-autokey-titlewords-stretch 1
        bibtex-autokey-titleword-length 5
        org-ref-bibtex-hydra-key-binding (kbd "C-c C-]"))
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
  (setq bibtex-completion-bibliography '("~/org/bib/index.bib"
                                         "~/org/bib/archive.bib")
        org-ref-default-bibliography '("~/org/bib/index.bib")
        org-ref-pdf-directory "~/org/bib/lib/")

  (setq
   bibtex-completion-library-path '("~/org/bib/bibtex-pdfs/")
   bibtex-completion-notes-path "~/org/roam/"))


(use-package tex-mode
  :config
  (setq TeX-PDF-mode t)
  ;; The damn text is too tiny on the preview.
  ;; (set-default 'preview-scale-function 3.0)

  ;; revert pdf-view after compilation
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t
        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex)

  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-buffer)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  ;; TODO Alt config!
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (setq TeX-PDF-mode t)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-save-query nil)
  (setq-default TeX-command-extra-options "--shell-escape")
  (setq TeX-error-overview-open-after-TeX-run t)
  (setq TeX-electric-math '("$" . "$"))
  (setq TeX-electric-sub-and-superscript t)

  ;; Fix auto-fill in math mode
  (setq-default LaTeX-fill-break-at-separators (quote (\\\( \\\[ \\\])))

  (eval-after-load "ispell"
    (progn
      (setq ispell-dictionary "en_US")
      (setq ispell-silently-savep t))) ; save personal dict without confirmation
  )
#+end_src
** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :defer t
  :diminish (markdown-mode gfm-mode)
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src
** pdf-tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :straight t
  :config
  (setq pdf-tools-enabled-modes
        '(pdf-history-minor-mode
          pdf-isearch-minor-mode
          pdf-links-minor-mode
          pdf-outline-minor-mode
          pdf-misc-size-indication-minor-mode
          pdf-occur-global-minor-mode))

  (setq pdf-view-display-size 'fit-width)
  (setq pdf-view-continuous t)
  (setq pdf-view-use-dedicated-register nil)
  (setq pdf-view-max-image-width 1080)
  (setq pdf-outline-imenu-use-flat-menus t)

  (pdf-loader-install)

  ;;; credits to prot as always!
  ;; Those functions and hooks are adapted from the manual of my modus-themes.
  ;; The idea is to (i) add a backdrop that is distinct from the background of
  ;; the PDF's page and (ii) make pdf-tools adapt to theme switching via, e.g.,
  ;; `modus-themes-toggle'.
  (defun prot/pdf-tools-backdrop ()
    (face-remap-add-relative
     'default `(:background
                ,(modus-themes-color
                  'bg-alt))))

  (defun prot/pdf-tools-midnight-mode-toggle ()
    (when (derived-mode-p 'pdf-view-mode)
      (if (eq (car custom-enabled-themes) 'modus-vivendi)
          (pdf-view-midnight-minor-mode 1)
        (pdf-view-midnight-minor-mode -1))
      (prot/pdf-tools-backdrop)))

  (add-hook 'pdf-tools-enabled-hook #'prot/pdf-tools-midnight-mode-toggle)
  (add-hook 'modus-themes-after-load-theme-hook #'prot/pdf-tools-midnight-mode-toggle)

  ;; TODO change enlarge ratios for =,+,- (pdf-view-enlarge, pdf-view-shrink), etc.
  )
#+end_src

** flyspell
#+begin_src emacs-lisp
(use-package flyspell
  :straight (:type built-in)
  :diminish flyspell-mode
  :hook ((org-mode-hook markdown-mode-hook) . (lambda () (interactive) (flyspell-mode))))
#+end_src

* Minibuffer and completion
** mct, minimalist completion
#+begin_src emacs-lisp
(use-package mct
  :straight (:type git :host gitlab
                   :repo "protesilaos/mct" :branch "main")
  :init
  (setq mct-minimum-input 2)
  (setq mct-live-update-delay 0.3)
  (setq mct-live-completion 'visible)
  (setq mct-apply-completion-stripes t)
  (setq mct-hide-completion-mode-line t)
  (setq mct-completions-format 'one-column) ;; 'one-column

  (setq mct-display-buffer-action
        (quote ((display-buffer-reuse-window
                 display-buffer-at-bottom))))

  ;; NOTE: `mct-completion-blocklist' can be used for commands with lots
  ;; of candidates, depending also on how low `mct-minimum-input' is.
  ;; With the settings shown here this is not required, otherwise I would
  ;; use something like this:
  (setq mct-completion-blocklist
        '( describe-symbol describe-function describe-variable
           execute-extended-command insert-char consult-buffer
           consult-git-grep consult-grep consult-ripgrep
           ))

  (setq mct-completion-passlist
        '(imenu
          consult-imenu
          consult-isearch-history
          consult-outline
          consult-recent-files
          consult-flycheck
          consult-compile-error
          consult-mark
          consult-global-mark
          Info-goto-node
          Info-index
          Info-menu
          vc-retrieve-tag
          find-file))

  (setq completion-show-inline-help t)
  (setq completions-detailed t)
  (setq completion-ignore-case t)

  (setq completion-cycle-threshold t) ;; always allow tab cycle
  ;; emacs28 completoins stuff
  (setq completions-group t)
  (setq completions-group-sort nil)


  (setq enable-recursive-minibuffers t)
  (setq minibuffer-eldef-shorten-default t) ;; default completion in [bracks]

  (setq read-buffer-completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)

  (setq resize-mini-windows t)

  (file-name-shadow-mode 1)
  (minibuffer-depth-indicate-mode 1)
  (minibuffer-electric-default-mode 1) ;; update default completion if change

     ;;; Minibuffer history
  (require 'savehist)
  (setq savehist-file (locate-user-emacs-file "savehist"))
  (setq history-length 10000)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history t)
  (add-hook 'after-init-hook #'savehist-mode)

  ;; can preview if we point at something in the completion list
  :config
  (define-key mct-minibuffer-local-completion-map (kbd "M-p") 'previous-history-element)
  (define-key mct-minibuffer-local-completion-map (kbd "M-g") 'mct-choose-completion-number)
  (define-key mct-minibuffer-local-completion-map (kbd "<backtab>") 'undo)
  (define-key mct-minibuffer-local-completion-map (kbd "M-<return>")
    #'(lambda () (interactive)
        (minibuffer-force-complete)
        (minibuffer-complete-and-exit)))

  (global-set-key (kbd "C-c C-m") 'mct-focus-mini-or-completions)
  (mct-mode 1))
#+end_src

** consult
#+begin_src emacs-lisp
(use-package consult
  :straight t
  :bind
  (("C-x b" . consult-buffer)
   ("C-M-y" . consult-yank-pop)
   ("C-:" . consult-complex-command)
   ([remap apropos-command] . consult-apropos))
  :init
  (setq consult-goto-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "e") 'consult-compile-error)
          (define-key map (kbd "l") 'consult-flymake)
          (define-key map (kbd "f") 'consult-flycheck)               ;; Alternative: consult-flycheck
          (define-key map (kbd "g") 'consult-goto-line)             ;; orig. goto-line
          (define-key map (kbd "o") 'consult-outline)               ;; Alternative: consult-org-heading
          (define-key map (kbd "m") 'consult-mark)
          (define-key map (kbd "k") 'consult-global-mark)
          (define-key map (kbd "i") 'consult-imenu)
          (define-key map (kbd "I") 'consult-imenu-multi)
          (define-key map (kbd "b") #'consult-bibtex)
          map))

  (setq consult-register-map
        (let ((map (make-sparse-keymap)))
          ;; Custom M-# bindings for fast register access
          (define-key map (kbd "l") 'consult-register-load)
          (define-key map (kbd "s") 'consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
          (define-key map (kbd "r") 'consult-register)
          (define-key map (kbd "b") 'consult-bookmark)
          map))
  (setq consult-mode-mode-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "h") 'consult-history)
          (define-key map (kbd "m") 'consult-mode-command)
          (define-key map (kbd "k") 'consult-kmacro)
          map))

  (setq consult-search-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "f") 'consult-find)
          (define-key map (kbd "F") 'consult-locate)
          (define-key map (kbd "g") 'consult-grep)
          (define-key map (kbd "G") 'consult-git-grep)
          (define-key map (kbd "r") 'consult-ripgrep)
          (define-key map (kbd "l") 'consult-line)
          (define-key map (kbd "L") 'consult-line-multi)
          (define-key map (kbd "m") 'consult-multi-occur)
          (define-key map (kbd "k") 'consult-keep-lines)
          (define-key map (kbd "u") 'consult-focus-lines)
          (define-key map (kbd "j") 'consult-recent-file)
          (define-key map (kbd "s") 'consult-isearch)
          map))
  (global-set-key (kbd "M-s") consult-search-map)
  (global-set-key (kbd "M-j") consult-goto-map)
  (global-set-key (kbd "M-r") consult-register-map)
  (setq consult-preview-key (kbd "C-o") ) ;; disable live preview
  (setq consult-project-root-function #'projectile-project-root)
  (setq consult-async-min-input 3)
  (setq consult-async-input-debounce 0.5)
  (setq consult-async-input-throttle 0.8)
  (setq consult-narrow-key "<")
  :config
  ;; (setf (alist-get 'slime-repl-mode consult-mode-histories)
  ;;       'slime-repl-input-history)
  (setq xref-show-xrefs-function #'consult-xref)
  (setq xref-show-definitions-function #'consult-xref)
  (setq completion-in-region-function #'consult-completion-in-region)
  (define-key completion-list-mode-map (kbd "C-o") #'consult-preview-at-point))

(use-package consult-dir
  :straight t
  :bind (("C-x C-d" . consult-dir)
         :map minibuffer-local-completion-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))


(use-package consult-bibtex
  :straight (:type git :host github :repo "mohkale/consult-bibtex")
  :config
  (with-eval-after-load 'embark
    (add-to-list 'embark-keymap-alist '(bibtex-completion . consult-bibtex-embark-map)))
  (setq consult-bibtex-default-action #'consult-bibtex-edit-notes))
#+end_src
** embark
#+begin_src emacs-lisp
(use-package embark
  :straight t
  :bind (("C->" . embark-become)
         ("M-a" . embark-act))
  :config
  (define-key completion-list-mode-map (kbd "M-a")
    #'(lambda () (interactive) () (mct-focus-mini-or-completions) (embark-act))))

(use-package embark-consult
  :straight t
  :after (embark consult)
  :demand t
  :config
  (define-key embark-collect-mode-map (kbd "o") 'consult-preview-at-point)
  ;; :hook (embark-collect-mode . embark-consult-preview-minor-mode)
  )
#+end_src

** marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :straight (:host github :repo "minad/marginalia" :branch "main")
  :demand
  :config
  (setq marginalia-annotators
        '(marginalia-annotators-heavy
          marginalia-annotators-light))
  (marginalia-mode 1))
#+end_src
** which-key
#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :diminish which-key-mode
  :config (which-key-mode 1))
#+end_src
** orderless
#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :config
  (setq completion-styles '(basic substring initials flex partial-completion orderless))
  (setq  completion-category-defaults nil
         completion-category-overrides '((file (styles . (partial-completion)))))
  (setq orderless-matching-styles '(orderless-prefixes
                                    orderless-literal
                                    orderless-strict-leading-initialism
                                    orderless-regexp
                                    ;;orderless-flex
                                    ))



  ;; SPC should never complete: use it for `orderless' groups.
  :bind (:map minibuffer-local-completion-map
              ("SPC" . nil)
              ("?" . nil)))
#+end_src
** TODO dabbrev, corfu (capf / completion framework frontends)
#+begin_src emacs-lisp
(use-package dabbrev
  :config
  (setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
  (setq dabbrev-abbrev-skip-leading-regexp "[$*/=~']")
  (setq dabbrev-backward-only nil)
  (setq dabbrev-case-distinction 'case-replace)
  (setq dabbrev-case-fold-search nil)
  (setq dabbrev-case-replace 'case-replace)
  (setq dabbrev-check-other-buffers t)
  (setq dabbrev-eliminate-newlines t)
  (setq dabbrev-upcase-means-case-search t)
  :bind (("C-M-/" . dabbrev-expand)
         ("M-/" . dabbrev-completion))
  )

(use-package corfu
  :straight '(corfu :host github
                    :repo "minad/corfu")
  ;; Optional customizations
  :custom
  (corfu-cycle t)            ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)             ;; Enable auto completion
  (corfu-quit-at-boundary t) ;; Automatically quit at word boundary
  (corfu-quit-no-match t)    ;; Automatically quit if there is no match
  (setq tab-always-indent 'complete)
  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  :bind (:map corfu-map
              ("TAB" . corfu-next)
              ([tab] . corfu-next)
              ("S-TAB" . corfu-previous)
              ([backtab] . corfu-previous))
  :init
  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)
  (corfu-global-mode))

(use-package cape
  :straight (:type git :host github :repo "minad/cape")
  :config
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  (add-to-list 'org-roam-completion-functions #'cape-file)
  (add-to-list 'org-roam-completion-functions #'cape-dabbrev)
  (add-to-list 'org-roam-completion-functions #'cape-keyword)
  (add-to-list 'org-roam-completion-functions #'cape-abbrev)
  (add-to-list 'org-roam-completion-functions #'cape-ispell)
  (add-to-list 'org-roam-completion-functions #'cape-dict)
  (add-to-list 'org-roam-completion-functions #'cape-symbol)
  )
#+end_src
** yasnippet
#+begin_src emacs-lisp
;; configuration
(use-package yasnippet
  :straight t
  :functions yas-global-mode yas-expand
  :diminish yas-minor-mode
  :config
  (yas-global-mode 1)
  (setq yas-fallback-behavior 'return-nil)
  (setq yas-triggers-in-field t)
  (setq yas-verbosity 0))
#+end_src

* programming languages and environments
** eglot
#+begin_src emacs-lisp
(use-package eglot
  :diminish lsp-mode
  :straight t
  :hook (((python-mode-hook cc-mode-hook c-mode-hook c++-mode-hook cuda-mode-hook c-common-mode-hook julia-mode-hook rjsx-mode-hook typescript-mode-hook tuareg-mode-hook ) . eglot-ensure)
         )
  :config
  (define-key eglot-mode-map (kbd "C-c y n") #'eglot-rename)
  (define-key eglot-mode-map (kbd "C-c y n") #'eglot-rename)
  (define-key eglot-mode-map (kbd "C-c y o") #'eglot-reconnect)
  (define-key eglot-mode-map (kbd "C-c y a") #'eglot-code-actions)
  (define-key eglot-mode-map (kbd "C-c y b") #'eglot-format-buffer)
  (define-key eglot-mode-map (kbd "C-c y h") #'eldoc)

  ;; i don't relaly like flymake, this issue
  ;; https://github.com/joaotavora/eglot/issues/42
  )

(use-package consult-eglot
  :straight t
  :config
  (define-key eglot-mode-map [remap xref-find-apropos] #'consult-eglot-symbols)
  (define-key eglot-mode-map (kbd "C-c y l") #'consult-flymake))
;; meh hack from here

;; https://gist.github.com/purcell/ca33abbea9a98bb0f8a04d790a0cadcd
;; might try flymake for a change

;; (defvar-local flycheck-eglot-current-errors nil)

;; (defun flycheck-eglot-report-fn (diags &rest _)
;;   (setq flycheck-eglot-current-errors
;;         (mapcar (lambda (diag)
;;                   (save-excursion
;;                     (goto-char (flymake--diag-beg diag))
;;                     (flycheck-error-new-at (line-number-at-pos)
;;                                            (1+ (- (point) (line-beginning-position)))
;;                                            (pcase (flymake--diag-type diag)
;;                                              ('eglot-error 'error)
;;                                              ('eglot-warning 'warning)
;;                                              ('eglot-note 'info)
;;                                              (_ (error "Unknown diag type, %S" diag)))
;;                                            (flymake--diag-text diag)
;;                                            :checker 'eglot)))
;;                 diags))
;;   (flycheck-buffer))

;; (defun flycheck-eglot--start (checker callback)
;;   (funcall callback 'finished flycheck-eglot-current-errors))

;; (defun flycheck-eglot--available-p ()
;;   (bound-and-true-p eglot--managed-mode))

;; (flycheck-define-generic-checker 'eglot
;;   "Report `eglot' diagnostics using `flycheck'."
;;   :start #'flycheck-eglot--start
;;   :predicate #'flycheck-eglot--available-p
;;   :modes '(prog-mode text-mode))

;; (push 'eglot flycheck-checkers)

;; (defun sanityinc/eglot-prefer-flycheck ()
;;   (when eglot--managed-mode
;;     (flycheck-add-mode 'eglot major-mode)
;;     (flycheck-select-checker 'eglot)
;;     (flycheck-mode)
;;     (flymake-mode -1)
;;     (setq eglot--current-flymake-report-fn 'flycheck-eglot-report-fn)))

;; (add-hook 'eglot--managed-mode-hook 'sanityinc/eglot-prefer-flycheck)
#+end_src
** ocaml
#+begin_src emacs-lisp
(use-package tuareg
  :straight t)

(use-package utop
  :straight t
  :config
  (setq utop-command "opam config exec -- utop -emacs")
  (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
  (add-hook 'tuareg-mode-hook 'utop-minor-mode)
  )
#+end_src
** python
#+begin_src emacs-lisp
(use-package python
  :straight t
  :after flycheck
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (setq python-indent-offset 4)
  (setq python-shell-interpreter "ipython"
        ;; python-shell-interpreter-args "console --simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
  ;; (add-to-list 'python-shell-completion-native-disabled-interpreters
  ;;              "jupyter")
  (custom-set-variables
   '(flycheck-python-flake8-executable "python3")
   '(flycheck-python-pycompile-executable "python3")
   '(flycheck-python-pylint-executable "python3"))
  (flycheck-add-next-checker 'python-flake8 'python-mypy t)
  )

(use-package pyvenv
  :straight t)
                                        ; optional: if Org Ref is not loaded anywhere else, load it here
#+end_src
** c environment (bare bones)
#+begin_src emacs-lisp
(use-package cc-mode
  :hook
  (c-common-mode-hook . hs-minor-mode)
  :config
  (setq gdb-many-windows 't)
  (setq compilation-ask-about-save nil)
  (setq compilation-scroll-output 'next-error)
  (setq compilation-skip-threshold 2)

  (setq tab-width 4)
  (setq c-basic-offset 4)
  (setq-default indent-tabs-mode nil)

  (define-key c-mode-map (kbd "C-j") 'c-indent-new-comment-line)
  (define-key c++-mode-map (kbd "C-j") 'c-indent-new-comment-line)
  (add-hook 'c++-mode-hook
            '(lambda ()
               (setq compile-command "cmake .. -DCMAKE_EXRORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Debug; make clean; cmake --build . -j8")
               )))

(use-package gud
  :after cc-mode
  :config
  (setq gud-nav-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "g b") 'gud-break)
          (define-key map (kbd "g <") 'gud-up)
          (define-key map (kbd "g >") 'gud-down)
          (define-key map (kbd "g n") 'gud-next)
          (define-key map (kbd "g s") 'gud-step)
          (define-key map (kbd "g c") 'gud-cont)
          (define-key map (kbd "g p") 'gud-print)
          (define-key map (kbd "g d") 'gud-remove)
          (define-key map (kbd "g l") 'gud-refresh)
          (define-key map (kbd "g e") 'gud-statement)
          map))
  (define-key c-mode-map (kbd "C-c C-g") gud-nav-map)
  (define-key c++-mode-map (kbd "C-c C-g") gud-nav-map))

(use-package cmake-mode
  :straight t)

(use-package eldoc-cmake
  :straight t
  :hook (cmake-mode-hook . eldoc-cmake-enable))
#+end_src
** symbolic math (maxima)
#+begin_src emacs-lisp
(use-package calc)
(use-package maxima
  :straight (:type git :host gitlab :repo "sasanidas/maxima")
  :init
  (add-hook 'maxima-mode-hook #'maxima-hook-function)
  (add-hook 'maxima-inferior-mode-hook #'maxima-hook-function)
  (setq
   org-format-latex-options (plist-put org-format-latex-options :scale 2.0)
   maxima-display-maxima-buffer nil)
  :mode ("\\.mac\\'" . maxima-mode)
  :interpreter ("maxima" . maxima-mode))
#+end_src

** docker
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :straight t)
#+end_src

** lisp and scheme
#+begin_src emacs-lisp
(use-package sly
  :straight t
  :config
  (setq inferior-lisp-program "/usr/bin/sbcl"))

(use-package sly-asdf
  :straight t)

(use-package sly-quicklisp
  :straight t)

;; eldoc provides minibuffer hints for elisp things. it's super nice
(use-package eldoc
  :straight t
  :diminish eldoc-mode
  :config
  (global-eldoc-mode 1))

;; paren stuff
(use-package paredit
  :straight t
  :diminish paredit-mode
  :hook ((emacs-lisp-mode-hook scheme-mode-hook lisp-mode-hook) . paredit-mode))

(use-package rainbow-delimiters
  :straight t
  :diminish rainbow-delimiters-mode
  :hook (prog-mode-hook . rainbow-delimiters-mode))

(use-package geiser
  :straight t)

(use-package geiser-chez
  :straight t
  :after geiser)

(add-to-list 'auto-mode-alist
             '("\\.sc\\'" . scheme-mode))

(add-to-list 'auto-mode-alist
             '("\\.sls\\'" . scheme-mode)
             '("\\.sps\\'" . scheme-mode))
#+end_src
** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :diminish flycheck-mode
  :defer t
  :hook
  ((prog-mode-hook . flycheck-mode))
  :config
  (setq flycheck-indication-mode nil)

  ;; set up simple cache so the checker isn't linear searching the (very many) checkers if it needs one
  (defvar-local my/flycheck-local-cache nil)
  (defun my/flycheck-checker-get (fn checker property)
    (or (alist-get property (alist-get checker my/flycheck-local-cache))
        (funcall fn checker property)))
  (advice-add 'flycheck-checker-get :around 'my/flycheck-checker-get)

  ;; set up mypy for flycheck in setting up typed python
  (add-hook 'lsp-managed-mode-hook
            (lambda ()
              (when (derived-mode-p 'python-mode)
                (setq my/flycheck-local-cache '((lsp . ((next-checkers . (python-mypy)))))))))

  (setq error-search-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "n") 'next-error)
          (define-key map (kbd "p") 'previous-error)
          (define-key map (kbd "d") 'flycheck-display-error-at-point)
          (define-key map (kbd "l") 'consult-flycheck)
          (define-key map (kbd "L") 'flycheck-list-errors)
          (define-key map (kbd "c") 'flycheck-compile)
          (define-key map (kbd "w") 'flycheck-copy-errors-as-kill)
          map))
  (global-set-key (kbd "C-c y e") error-search-map))

(use-package consult-flycheck
  :straight (:type git :host github :repo "minad/consult-flycheck"))
#+end_src
* unix environment interaction
** magit and vc
#+begin_src emacs-lisp
;; Mark TODOs , FIXME, BUG as red in src code
(add-hook 'prog-mode-hook
          (lambda ()
            (font-lock-add-keywords
             nil
             '(("\\<\\(FIXME\\|TODO\\|BUG\\)" 1 font-lock-warning-face prepend)))))

;;; Magit
;; God bless magit and all that it does
(use-package magit
  :straight t
  :commands magit-status magit-blame
  :config
  (setq magit-branch-arguments nil
        ;; don't put "origin-" in front of new branch names by default
        magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
        magit-push-always-verify nil
        magit-restore-window-configuration t)
  (unbind-key (kbd "SPC") magit-mode-map)
  :bind ("C-x g" . magit-status))

;; More info here: [[https://github.com/syohex/emacs-git-gutter]]
(use-package git-gutter ; TODO - git gutter keybinds, going to different hunks and staging only certain portions!
  :straight t
  :diminish git-gutter-mode
  :config
  (global-git-gutter-mode +1))

(use-package projectile
  :straight t
  :diminish
  :config
  (projectile-global-mode)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src
** eshell
#+begin_src emacs-lisp
(use-package eshell
  :init
  (setq eshell-buffer-shorthand t
        eshell-scroll-to-bottom-on-input 'all
        eshell-error-if-no-glob t
        eshell-hist-ignoredups t
        eshell-save-history-on-exit t
        eshell-prefer-lisp-functions nil
        eshell-destroy-buffer-when-process-dies t)
  :bind ("<f1>" . eshell))
#+end_src
** proced (top for emacs)
#+begin_src emacs-lisp
(use-package proced
  :straight (:type built-in)
  :init
  (setq proced-auto-update-flag t)
  (setq proced-auto-update-interval 5)
  (setq proced-descend t)
  (setq prcoed-filter 'user))
#+end_src

** dired, recentf, wgrep
#+begin_src emacs-lisp
;; clean up permissions and owners, less noisy
(use-package dired
  :config
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode 1)))

  ;; disable ls by default
  (setq dired-use-ls-dired nil))

(use-package recentf                    ; Save recently visited files
  :init (recentf-mode)
  :diminish recentf-mode
  :config
  (setq
   recentf-max-saved-items 200
   recentf-max-menu-items 15
   ;; Cleanup recent files only when Emacs is idle, but not when the mode
   ;; is enabled, because that unnecessarily slows down Emacs. My Emacs
   ;; idles often enough to have the recent files list clean up regularly
   recentf-auto-cleanup 300
   recentf-exclude (list "/\\.git/.*\\'"     ; Git contents
                         "/elpa/.*\\'"       ; Package files
                         "/itsalltext/"      ; It's all text temp files
                         ;; And all other kinds of boring files
                         )))

(use-package wgrep
  :straight t
  :bind
  (:map grep-mode-map
        ("C-x C-q" . wgrep-change-to-wgrep-mode)
        ("C-c C-p" . wgrep-change-to-wgrep-mode)))
#+end_src
** ediff
#+begin_src emacs-lisp
(use-package ediff
  :diminish ediff-mode
  :custom
  (ediff-diff-options "-w"))
#+end_src
** exec path from shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :straight t
  :config
  (exec-path-from-shell-initialize))
#+end_src

* notmuch, mail in emacs
#+begin_src emacs-lisp
(use-package notmuch
  :straight t
  :config
  (setq notmuch-show-logo nil)
  (setq notmuch-column-control t)
  (setq notmuch-hello-auto-refresh t)
  (setq notmuch-hello-recent-searches-max 20)
  (setq notmuch-hello-thousands-separator "")
  ;; ;; See my variant of it in `prot-notmuch' below.
  (setq notmuch-hello-sections '(notmuch-hello-insert-saved-searches))
  (setq notmuch-show-all-tags-list t)

  (setq notmuch-search-oldest-first nil)

  (setq notmuch-search-line-faces
        '(("unread" . notmuch-search-unread-face)
          ("flag" . notmuch-search-flagged-face)))
  (setq notmuch-show-empty-saved-searches t)

  (setq notmuch-saved-searches
        `(( :name "all"
            :query "not tag:archived and not tag:list and not tag:lists and not tag:spam"
            :sort-order newest-first
            :key ,(kbd "a"))
          ( :name "inbox"
            :query "tag:inbox not tag:archived"
            :sort-order newest-first
            :search-type tree
            :key ,(kbd "i"))
          ( :name "unread (inbox)"
            :query "tag:unread and tag:inbox"
            :sort-order newest-first
            :search-type tree
            :key ,(kbd "u"))
          ( :name "unread all"
            :query "tag:unread and not tag:archived and not tag:list and not tag:lists"
            :sort-order newest-first
            :key ,(kbd "U"))
          ( :name "personal"
            :query "tag:personal not tag:archived"
            :search-type tree
            :sort-order newest-first
            :key ,(kbd "p"))
          ( :name "personal all"
            :query "tag:personal"
            :sort-order newest-first
            :search-type tree
            :key ,(kbd "P"))
          ( :name "todo"
            :query "tag:todo not tag:archived"
            :sort-order newest-first
            :search-type tree
            :key ,(kbd "t"))
          ( :name "todo all"
            :query "tag:todo"
            :sort-order newest-first
            :search-type tree
            :key ,(kbd "T"))
          ( :name "done"
            :query "tag:done"
            :sort-order newest-first
            :search-type tree
            :key ,(kbd "d"))
          ( :name "flagged"
            :query "tag:flag or tag:flagged or tag:important or tag:starred"
            :sort-order newest-first
            :search-type tree
            :key ,(kbd "f"))
          ( :name "mailing lists"
            :query "tag:list or tag:lists not tag:archived"
            :sort-order newest-first
            :key ,(kbd "m"))
          ))

  (setq notmuch-archive-tags '("-inbox" "+archived"))
  (setq notmuch-message-replied-tags '("+replied"))
  (setq notmuch-message-forwarded-tags '("+forwarded"))
  (setq notmuch-show-mark-read-tags '("-unread"))
  (setq notmuch-draft-tags '("+draft"))
  (setq notmuch-draft-folder "drafts")
  (setq notmuch-draft-save-plaintext 'ask)

  ;; ;; NOTE 2021-06-18: See an updated version in the `prot-notmuch'
  ;; ;; section below.
  (setq notmuch-tagging-keys
        `((,(kbd "a") notmuch-archive-tags "Archive (remove from inbox)")
          (,(kbd "c") ("+archived" "-inbox" "-list" "-todo" "-ref" "-unread") "Complete and archive")
          (,(kbd "d") ("+del" "-inbox" "-archived" "-unread") "Mark for deletion")
          (,(kbd "f") ("+flag" "-unread") "Flag as important")
          ;; (,(kbd "r") notmuch-show-mark-read-tags "Mark as read")
          (,(kbd "r") ("+ref" "+notes" "-unread") "Reference for the future")
          (,(kbd "s") ("+spam" "+del" "-inbox" "-unread") "Mark as spam")
          (,(kbd "T") ("+todo" "-unread") "To-do")
          (,(kbd "u") ("+unread") "Mark as unread")))

  (setq notmuch-tag-formats
        '(("unread" (propertize tag 'face 'notmuch-tag-unread))
          ("flag" (propertize tag 'face 'notmuch-tag-flagged))))
  (setq notmuch-tag-deleted-formats
        '(("unread" (notmuch-apply-face bare-tag `notmuch-tag-deleted))
          (".*" (notmuch-apply-face tag `notmuch-tag-deleted))))

;;; Email composition
  (setq notmuch-mua-compose-in 'current-window)
  (setq notmuch-mua-hidden-headers nil) ; TODO 2021-05-12: Review hidden headers
  (setq notmuch-address-command nil)    ; FIXME 2021-05-13: Make it work with EBDB
  (setq notmuch-always-prompt-for-sender t)
  (setq notmuch-mua-cite-function 'message-cite-original-without-signature)
  (setq notmuch-mua-reply-insert-header-p-function 'notmuch-show-reply-insert-header-p-never)
  (setq notmuch-mua-user-agent-function #'notmuch-mua-user-agent-full)
  (setq notmuch-maildir-use-notmuch-insert t)
  (setq notmuch-crypto-process-mime t)
  (setq notmuch-crypto-get-keys-asynchronously t)
  (setq notmuch-mua-attachment-regexp   ; see `notmuch-mua-send-hook'
        (concat "\\b\\(attache\?ment\\|attached\\|attach\\)"
                "\\b"))

;;; Reading messages
  (setq notmuch-show-relative-dates t)
  (setq notmuch-show-all-multipart/alternative-parts nil)
  (setq notmuch-show-indent-messages-width 0)
  (setq notmuch-show-indent-multipart nil)
  (setq notmuch-show-part-button-default-action 'notmuch-show-save-part)
  (setq notmuch-show-text/html-blocked-images ".") ; block everything
  (setq notmuch-wash-citation-lines-prefix 6)
  (setq notmuch-wash-citation-lines-suffix 6)
  (setq notmuch-wash-wrap-lines-length 100)
  (setq notmuch-unthreaded-show-out nil)
  (setq notmuch-message-headers '("To" "Cc" "Subject" "Date"))
  (setq notmuch-message-headers-visible t)

;;; Hooks and key bindings
  (add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)
  (remove-hook 'notmuch-show-hook #'notmuch-show-turn-on-visual-line-mode)
  (add-hook 'notmuch-show-hook (lambda () (setq-local header-line-format nil)))

  ;; Use alternating backgrounds, if `stripes' is available.
  (with-eval-after-load 'stripes
    (add-hook 'notmuch-search-hook #'stripes-mode)
    ;; ;; To disable `hl-line-mode':
    ;; (setq notmuch-search-hook nil)
    ;; (add-hook 'notmuch-search-hook #'prot-common-disable-hl-line)
    )

  (let ((map global-map))
    (define-key map (kbd "C-c m") #'notmuch)
    (define-key map (kbd "C-x m") #'notmuch-mua-new-mail)) ; override `compose-mail'
  (define-key notmuch-search-mode-map (kbd "/") #'notmuch-search-filter) ; alias for l
  (define-key notmuch-hello-mode-map (kbd "C-<tab>") nil)
  )


;;; Sending email (SMTP)
(use-package smtpmail
  :config
  (setq smtpmail-stream-type 'ssl)
  (setq smtpmail-smtp-service 465)
  (setq smtpmail-queue-mail nil)
  (setq smtpmail-smtp-server "smtp.gmail.com")
  ;; (setq smtpmail-auth-credentials '(("smtp.gmail.com" 465 "liampacker@gmail.com" "acydhqtbgeudyvxm")))
  (setq smtpmail-debug-info t)
  (setq smtpmail-debug-verb t)
  )

(use-package sendmail
  :config
  (setq send-mail-function 'smtpmail-send-it))
#+END_SRC

* eww, web browsing
#+begin_src emacs-lisp
(use-package eww
  :straight (:type built-in)
  :hook (eww-mode-hook . (lambda () (define-key evil-normal-state-map (kbd "SPC") my-leader-map)))
  :config
  (global-set-key (kbd "<f12>") 'eww)
  (setq shr-use-colors nil)             ; t is bad for accessibility
  (setq shr-use-fonts nil)              ; t is not for me
  (setq shr-max-image-proportion 0.6)
  (setq shr-image-animate nil)          ; No GIFs, thank you!
  (setq shr-width nil)                  ; check `prot-eww-readable'
  (setq shr-discard-aria-hidden t)
  (setq shr-cookie-policy nil)

  (setq eww-search-prefix "https://www.google.com/search?q=")

  (setq browse-url-browser-function 'eww-browse-url)
  (setq browse-url-secondary-browser-function 'browse-url-default-browser)
  (setq eww-restore-desktop t)
  (setq eww-desktop-remove-duplicates t)
  (setq eww-header-line-format nil)
  (setq eww-download-directory (expand-file-name "~/Documents/eww-downloads"))
  (setq eww-suggest-uris
        '(eww-links-at-point
          thing-at-point-url-at-point))
  (setq eww-bookmarks-directory (locate-user-emacs-file "eww-bookmarks/"))
  (setq eww-history-limit 150)
  (setq eww-browse-url-new-window-is-tab nil)
  (setq eww-form-checkbox-selected-symbol "[X]")
  (setq eww-form-checkbox-symbol "[ ]")
  (setq eww-retrieve-command nil)

  (define-key eww-link-keymap (kbd "v") nil) ; stop overriding `eww-view-source'
  (define-key eww-mode-map (kbd "L") #'eww-list-bookmarks)
  (define-key dired-mode-map (kbd "E") #'eww-open-file) ; to render local HTML files
  (define-key eww-buffers-mode-map (kbd "d") #'eww-bookmark-kill)   ; it actually deletes
  (define-key eww-bookmark-mode-map (kbd "d") #'eww-bookmark-kill) ; same
  )
#+end_src
* elfeed -- RSS feed reader
CLOSED: [2021-11-07 Sun 13:21]
#+begin_src emacs-lisp
(use-package elfeed
  :straight t
  :config
  (define-key global-map (kbd "C-c e") #'elfeed)

  (global-set-key (kbd "C-x w") 'elfeed)
  (setq elfeed-use-curl t)
  (setq elfeed-curl-max-connections 10)
  (setq elfeed-db-directory (concat user-emacs-directory "elfeed/"))
  (setq elfeed-enclosure-default-dir "~/Downloads/")
  (setq elfeed-search-filter "@4-months-ago +unread")
  (setq elfeed-sort-order 'descending)
  (setq elfeed-search-clipboard-type 'CLIPBOARD)
  (setq elfeed-search-title-max-width 160)
  (setq elfeed-search-title-min-width 30)
  (setq elfeed-search-trailing-width 25)
  (setq elfeed-show-truncate-long-urls t)
  (setq elfeed-show-unique-buffers t)
  (setq elfeed-search-date-format '("%F %R" 16 :left))

  (let ((map elfeed-search-mode-map))
    (define-key map (kbd "w") #'elfeed-search-yank)
    (define-key map (kbd "g") #'elfeed-update)
    (define-key map (kbd "G") #'elfeed-search-update--force)) ; "hop" mnemonic
  (let ((map elfeed-show-mode-map))
    (define-key map (kbd "w") #'elfeed-show-yank))
  ;; Make sure to also check the section on shr and eww for how I handle
  ;; `shr-width' there.
  (add-hook 'elfeed-show-mode-hook
            (lambda () (setq-local shr-width (max 80 (current-fill-column)))))

  ;; This is set in two places now, once in =eww= and once here.
  (setq browse-url-browser-function 'eww-browse-url)
  (setq browse-url-secondary-browser-function 'browse-url-default-browser)
  (setq elfeed-feeds '("https://protesilaos.com/master.xml"
                       "https://hnrss.org/newest?points=100"
                       "https://dynomight.net/feed.xml"
                       ("https://computer.rip/rss.xml" tech) ;; "computers are bad
                       ("http://rachelbythebay.com/w/2021/11/06/sql/" tech)
                       ("https://thinkingthrough.substack.com/feed" tech swe)
                       ("https://matt.might.net/articles/feed.rss" tech academia pl)
                       "https://www.nayuki.io/rss20.xml"
                       "https://ava.substack.com/feed"
                       "https://askmolly.substack.com/feed"
                       "https://askpolly.substack.com/feed"
                       "https://cherylstrayed.substack.com/feed"
                       "https://griefbacon.substack.com/feed"
                       ("https://leandramcohen.substack.com/feed" fashion)
                       "https://defaultfriend.substack.com/feed"
                       "https://jdahl.substack.com/feed"
                       ("https://www.garrisonkeillor.com/feed/" writing)
                       ("https://www.spreaker.com/show/3389445/episodes/feed" writing)
                       ("http://feeds.feedburner.com/FineArtAndYou" art)
                       ("http://inconvergent.net/atom.xml" infrequent)
                       ("http://nullprogram.com/feed/" infrequent)
                       ("http://feeds.feedburner.com/datacolada/" infrequent)
                       ("https://terrytao.wordpress.com/feed/" math)
                       "http://xkcd.com/rss.xml"
                       ("http://feeds.feedburner.com/RoguelikeRadio" infrequent)
                       "http://cppcast.libsyn.com/rss"
                       "http://planet.emacsen.org/atom.xml"
                       ("https://www.reddit.com/r/dailyprogrammer/.rss"                        daily)
                       ("http://understandinguncertainty.org/blog" infrequent)
                       ("http://timharford.com/feed/"                                        econ)
                       ("https://www.bennee.com/~alex/blog/feeds/all.atom.xml" infrequent)
                       ("https://sive.rs/podcast.rss" infrequent)
                       ("https://jack-clark.net/feed/" ai)
                       ("https://lacker.io/feed.xml" ai)
                       ("https://graymirror.substack.com/feed" leftist))))
#+end_src
